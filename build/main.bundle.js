!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=9)}([function(t,e,n){"use strict";n.r(e),n.d(e,"h",function(){return u}),n.d(e,"createElement",function(){return u}),n.d(e,"cloneElement",function(){return l}),n.d(e,"Component",function(){return D}),n.d(e,"render",function(){return I}),n.d(e,"rerender",function(){return d}),n.d(e,"options",function(){return o});var r=function(){},o={},i=[],a=[];function u(t,e){var n,u,s,c,l=a;for(c=arguments.length;c-- >2;)i.push(arguments[c]);for(e&&null!=e.children&&(i.length||i.push(e.children),delete e.children);i.length;)if((u=i.pop())&&void 0!==u.pop)for(c=u.length;c--;)i.push(u[c]);else"boolean"==typeof u&&(u=null),(s="function"!=typeof t)&&(null==u?u="":"number"==typeof u?u=String(u):"string"!=typeof u&&(s=!1)),s&&n?l[l.length-1]+=u:l===a?l=[u]:l.push(u),n=s;var f=new r;return f.nodeName=t,f.children=l,f.attributes=null==e?void 0:e,f.key=null==e?void 0:e.key,void 0!==o.vnode&&o.vnode(f),f}function s(t,e){for(var n in e)t[n]=e[n];return t}var c="function"==typeof Promise?Promise.resolve().then.bind(Promise.resolve()):setTimeout;function l(t,e){return u(t.nodeName,s(s({},t.attributes),e),arguments.length>2?[].slice.call(arguments,2):t.children)}var f=/acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i,p=[];function h(t){!t._dirty&&(t._dirty=!0)&&1==p.push(t)&&(o.debounceRendering||c)(d)}function d(){var t,e=p;for(p=[];t=e.pop();)t._dirty&&N(t)}function v(t,e,n){return"string"==typeof e||"number"==typeof e?void 0!==t.splitText:"string"==typeof e.nodeName?!t._componentConstructor&&y(t,e.nodeName):n||t._componentConstructor===e.nodeName}function y(t,e){return t.normalizedNodeName===e||t.nodeName.toLowerCase()===e.toLowerCase()}function b(t){var e=s({},t.attributes);e.children=t.children;var n=t.nodeName.defaultProps;if(void 0!==n)for(var r in n)void 0===e[r]&&(e[r]=n[r]);return e}function g(t){var e=t.parentNode;e&&e.removeChild(t)}function m(t,e,n,r,o){if("className"===e&&(e="class"),"key"===e);else if("ref"===e)n&&n(null),r&&r(t);else if("class"!==e||o)if("style"===e){if(r&&"string"!=typeof r&&"string"!=typeof n||(t.style.cssText=r||""),r&&"object"==typeof r){if("string"!=typeof n)for(var i in n)i in r||(t.style[i]="");for(var i in r)t.style[i]="number"==typeof r[i]&&!1===f.test(i)?r[i]+"px":r[i]}}else if("dangerouslySetInnerHTML"===e)r&&(t.innerHTML=r.__html||"");else if("o"==e[0]&&"n"==e[1]){var a=e!==(e=e.replace(/Capture$/,""));e=e.toLowerCase().substring(2),r?n||t.addEventListener(e,_,a):t.removeEventListener(e,_,a),(t._listeners||(t._listeners={}))[e]=r}else if("list"!==e&&"type"!==e&&!o&&e in t){try{t[e]=null==r?"":r}catch(t){}null!=r&&!1!==r||"spellcheck"==e||t.removeAttribute(e)}else{var u=o&&e!==(e=e.replace(/^xlink:?/,""));null==r||!1===r?u?t.removeAttributeNS("http://www.w3.org/1999/xlink",e.toLowerCase()):t.removeAttribute(e):"function"!=typeof r&&(u?t.setAttributeNS("http://www.w3.org/1999/xlink",e.toLowerCase(),r):t.setAttribute(e,r))}else t.className=r||""}function _(t){return this._listeners[t.type](o.event&&o.event(t)||t)}var w=[],O=0,S=!1,A=!1;function x(){for(var t;t=w.pop();)o.afterMount&&o.afterMount(t),t.componentDidMount&&t.componentDidMount()}function C(t,e,n,r,o,i){O++||(S=null!=o&&void 0!==o.ownerSVGElement,A=null!=t&&!("__preactattr_"in t));var a=E(t,e,n,r,i);return o&&a.parentNode!==o&&o.appendChild(a),--O||(A=!1,i||x()),a}function E(t,e,n,r,o){var i=t,a=S;if(null!=e&&"boolean"!=typeof e||(e=""),"string"==typeof e||"number"==typeof e)return t&&void 0!==t.splitText&&t.parentNode&&(!t._component||o)?t.nodeValue!=e&&(t.nodeValue=e):(i=document.createTextNode(e),t&&(t.parentNode&&t.parentNode.replaceChild(i,t),j(t,!0))),i.__preactattr_=!0,i;var u=e.nodeName;if("function"==typeof u)return function(t,e,n,r){var o=t&&t._component,i=o,a=t,u=o&&t._componentConstructor===e.nodeName,s=u,c=b(e);for(;o&&!s&&(o=o._parentComponent);)s=o.constructor===e.nodeName;o&&s&&(!r||o._component)?(R(o,c,3,n,r),t=o.base):(i&&!u&&(M(i),t=a=null),o=L(e.nodeName,c,n),t&&!o.nextBase&&(o.nextBase=t,a=null),R(o,c,1,n,r),t=o.base,a&&t!==a&&(a._component=null,j(a,!1)));return t}(t,e,n,r);if(S="svg"===u||"foreignObject"!==u&&S,u=String(u),(!t||!y(t,u))&&(i=function(t,e){var n=e?document.createElementNS("http://www.w3.org/2000/svg",t):document.createElement(t);return n.normalizedNodeName=t,n}(u,S),t)){for(;t.firstChild;)i.appendChild(t.firstChild);t.parentNode&&t.parentNode.replaceChild(i,t),j(t,!0)}var s=i.firstChild,c=i.__preactattr_,l=e.children;if(null==c){c=i.__preactattr_={};for(var f=i.attributes,p=f.length;p--;)c[f[p].name]=f[p].value}return!A&&l&&1===l.length&&"string"==typeof l[0]&&null!=s&&void 0!==s.splitText&&null==s.nextSibling?s.nodeValue!=l[0]&&(s.nodeValue=l[0]):(l&&l.length||null!=s)&&function(t,e,n,r,o){var i,a,u,s,c,l=t.childNodes,f=[],p={},h=0,d=0,y=l.length,b=0,m=e?e.length:0;if(0!==y)for(var _=0;_<y;_++){var w=l[_],O=w.__preactattr_,S=m&&O?w._component?w._component.__key:O.key:null;null!=S?(h++,p[S]=w):(O||(void 0!==w.splitText?!o||w.nodeValue.trim():o))&&(f[b++]=w)}if(0!==m)for(var _=0;_<m;_++){s=e[_],c=null;var S=s.key;if(null!=S)h&&void 0!==p[S]&&(c=p[S],p[S]=void 0,h--);else if(d<b)for(i=d;i<b;i++)if(void 0!==f[i]&&v(a=f[i],s,o)){c=a,f[i]=void 0,i===b-1&&b--,i===d&&d++;break}c=E(c,s,n,r),u=l[_],c&&c!==t&&c!==u&&(null==u?t.appendChild(c):c===u.nextSibling?g(u):t.insertBefore(c,u))}if(h)for(var _ in p)void 0!==p[_]&&j(p[_],!1);for(;d<=b;)void 0!==(c=f[b--])&&j(c,!1)}(i,l,n,r,A||null!=c.dangerouslySetInnerHTML),function(t,e,n){var r;for(r in n)e&&null!=e[r]||null==n[r]||m(t,r,n[r],n[r]=void 0,S);for(r in e)"children"===r||"innerHTML"===r||r in n&&e[r]===("value"===r||"checked"===r?t[r]:n[r])||m(t,r,n[r],n[r]=e[r],S)}(i,e.attributes,c),S=a,i}function j(t,e){var n=t._component;n?M(n):(null!=t.__preactattr_&&t.__preactattr_.ref&&t.__preactattr_.ref(null),!1!==e&&null!=t.__preactattr_||g(t),P(t))}function P(t){for(t=t.lastChild;t;){var e=t.previousSibling;j(t,!0),t=e}}var T=[];function L(t,e,n){var r,o=T.length;for(t.prototype&&t.prototype.render?(r=new t(e,n),D.call(r,e,n)):((r=new D(e,n)).constructor=t,r.render=k);o--;)if(T[o].constructor===t)return r.nextBase=T[o].nextBase,T.splice(o,1),r;return r}function k(t,e,n){return this.constructor(t,n)}function R(t,e,n,r,i){t._disable||(t._disable=!0,t.__ref=e.ref,t.__key=e.key,delete e.ref,delete e.key,void 0===t.constructor.getDerivedStateFromProps&&(!t.base||i?t.componentWillMount&&t.componentWillMount():t.componentWillReceiveProps&&t.componentWillReceiveProps(e,r)),r&&r!==t.context&&(t.prevContext||(t.prevContext=t.context),t.context=r),t.prevProps||(t.prevProps=t.props),t.props=e,t._disable=!1,0!==n&&(1!==n&&!1===o.syncComponentUpdates&&t.base?h(t):N(t,1,i)),t.__ref&&t.__ref(t))}function N(t,e,n,r){if(!t._disable){var i,a,u,c=t.props,l=t.state,f=t.context,p=t.prevProps||c,h=t.prevState||l,d=t.prevContext||f,v=t.base,y=t.nextBase,g=v||y,m=t._component,_=!1,S=d;if(t.constructor.getDerivedStateFromProps&&(l=s(s({},l),t.constructor.getDerivedStateFromProps(c,l)),t.state=l),v&&(t.props=p,t.state=h,t.context=d,2!==e&&t.shouldComponentUpdate&&!1===t.shouldComponentUpdate(c,l,f)?_=!0:t.componentWillUpdate&&t.componentWillUpdate(c,l,f),t.props=c,t.state=l,t.context=f),t.prevProps=t.prevState=t.prevContext=t.nextBase=null,t._dirty=!1,!_){i=t.render(c,l,f),t.getChildContext&&(f=s(s({},f),t.getChildContext())),v&&t.getSnapshotBeforeUpdate&&(S=t.getSnapshotBeforeUpdate(p,h));var A,E,P=i&&i.nodeName;if("function"==typeof P){var T=b(i);(a=m)&&a.constructor===P&&T.key==a.__key?R(a,T,1,f,!1):(A=a,t._component=a=L(P,T,f),a.nextBase=a.nextBase||y,a._parentComponent=t,R(a,T,0,f,!1),N(a,1,n,!0)),E=a.base}else u=g,(A=m)&&(u=t._component=null),(g||1===e)&&(u&&(u._component=null),E=C(u,i,f,n||!v,g&&g.parentNode,!0));if(g&&E!==g&&a!==m){var k=g.parentNode;k&&E!==k&&(k.replaceChild(E,g),A||(g._component=null,j(g,!1)))}if(A&&M(A),t.base=E,E&&!r){for(var D=t,I=t;I=I._parentComponent;)(D=I).base=E;E._component=D,E._componentConstructor=D.constructor}}for(!v||n?w.unshift(t):_||(t.componentDidUpdate&&t.componentDidUpdate(p,h,S),o.afterUpdate&&o.afterUpdate(t));t._renderCallbacks.length;)t._renderCallbacks.pop().call(t);O||r||x()}}function M(t){o.beforeUnmount&&o.beforeUnmount(t);var e=t.base;t._disable=!0,t.componentWillUnmount&&t.componentWillUnmount(),t.base=null;var n=t._component;n?M(n):e&&(e.__preactattr_&&e.__preactattr_.ref&&e.__preactattr_.ref(null),t.nextBase=e,g(e),T.push(t),P(e)),t.__ref&&t.__ref(null)}function D(t,e){this._dirty=!0,this.context=e,this.props=t,this.state=this.state||{},this._renderCallbacks=[]}function I(t,e,n){return C(n,t,{},!1,e,!1)}s(D.prototype,{setState:function(t,e){this.prevState||(this.prevState=this.state),this.state=s(s({},this.state),"function"==typeof t?t(this.state,this.props):t),e&&this._renderCallbacks.push(e),h(this)},forceUpdate:function(t){t&&this._renderCallbacks.push(t),N(this,2)},render:function(){}});var U={h:u,createElement:u,cloneElement:l,Component:D,render:I,rerender:d,options:o};e.default=U},function(t,e,n){"use strict";n.r(e),function(t,r){n.d(e,"Reaction",function(){return Dt}),n.d(e,"untracked",function(){return bt}),n.d(e,"IDerivationState",function(){return ot}),n.d(e,"createAtom",function(){return E}),n.d(e,"spy",function(){return Kt}),n.d(e,"comparer",function(){return j}),n.d(e,"isObservableObject",function(){return dn}),n.d(e,"isBoxedObservable",function(){return ut}),n.d(e,"isObservableArray",function(){return Ze}),n.d(e,"ObservableMap",function(){return tn}),n.d(e,"isObservableMap",function(){return rn}),n.d(e,"ObservableSet",function(){return an}),n.d(e,"isObservableSet",function(){return un}),n.d(e,"transaction",function(){return De}),n.d(e,"observable",function(){return q}),n.d(e,"computed",function(){return $}),n.d(e,"isObservable",function(){return Oe}),n.d(e,"isObservableProp",function(){return Se}),n.d(e,"isComputed",function(){return me}),n.d(e,"isComputedProp",function(){return _e}),n.d(e,"extendObservable",function(){return ae}),n.d(e,"observe",function(){return Le}),n.d(e,"intercept",function(){return be}),n.d(e,"autorun",function(){return Xt}),n.d(e,"reaction",function(){return te}),n.d(e,"when",function(){return Ie}),n.d(e,"action",function(){return Yt}),n.d(e,"isAction",function(){return Ft}),n.d(e,"runInAction",function(){return Jt}),n.d(e,"keys",function(){return Ae}),n.d(e,"values",function(){return xe}),n.d(e,"entries",function(){return Ce}),n.d(e,"set",function(){return Ee}),n.d(e,"remove",function(){return je}),n.d(e,"has",function(){return Pe}),n.d(e,"get",function(){return Te}),n.d(e,"decorate",function(){return ie}),n.d(e,"configure",function(){return oe}),n.d(e,"onBecomeObserved",function(){return ee}),n.d(e,"onBecomeUnobserved",function(){return ne}),n.d(e,"flow",function(){return de}),n.d(e,"toJS",function(){return Ne}),n.d(e,"trace",function(){return Me}),n.d(e,"getDependencyTree",function(){return ce}),n.d(e,"getObserverTree",function(){return fe}),n.d(e,"_resetGlobalState",function(){return Et}),n.d(e,"_getGlobalState",function(){return Ct}),n.d(e,"getDebugName",function(){return bn}),n.d(e,"getAtom",function(){return vn}),n.d(e,"_getAdministration",function(){return yn}),n.d(e,"_allowStateChanges",function(){return tt}),n.d(e,"_allowStateChangesInsideComputed",function(){return rt}),n.d(e,"isArrayLike",function(){return _}),n.d(e,"$mobx",function(){return A}),n.d(e,"_isComputingDerivation",function(){return ht}),n.d(e,"onReactionError",function(){return It}),n.d(e,"_interceptReads",function(){return ye});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};var i=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t};function a(t){var e="function"==typeof Symbol&&t[Symbol.iterator],n=0;return e?e.call(t):{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}}}function u(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}var s="An invariant failed, however the error is obfuscated because this is an production build.",c=[];Object.freeze(c);var l={};function f(){return++xt.mobxGuid}function p(t){throw h(!1,t),"X"}function h(t,e){if(!t)throw new Error("[mobx] "+(e||s))}Object.freeze(l);function d(t){var e=!1;return function(){if(!e)return e=!0,t.apply(this,arguments)}}var v=function(){};function y(t){return null!==t&&"object"==typeof t}function b(t){if(null===t||"object"!=typeof t)return!1;var e=Object.getPrototypeOf(t);return e===Object.prototype||null===e}function g(t,e,n){Object.defineProperty(t,e,{enumerable:!1,writable:!0,configurable:!0,value:n})}function m(t,e){var n="isMobX"+t;return e.prototype[n]=!0,function(t){return y(t)&&!0===t[n]}}function _(t){return Array.isArray(t)||Ze(t)}function w(t){return t instanceof Map}function O(t){return t instanceof Set}function S(t){return null===t?null:"object"==typeof t?""+t:t}var A=Symbol("mobx administration"),x=function(){function t(t){void 0===t&&(t="Atom@"+f()),this.name=t,this.isPendingUnobservation=!1,this.isBeingObserved=!1,this.observers=new Set,this.diffValue=0,this.lastAccessedBy=0,this.lowestObserverState=ot.NOT_TRACKING}return t.prototype.onBecomeObserved=function(){this.onBecomeObservedListeners&&this.onBecomeObservedListeners.forEach(function(t){return t()})},t.prototype.onBecomeUnobserved=function(){this.onBecomeUnobservedListeners&&this.onBecomeUnobservedListeners.forEach(function(t){return t()})},t.prototype.reportObserved=function(){return Nt(this)},t.prototype.reportChanged=function(){kt(),function(t){if(t.lowestObserverState===ot.STALE)return;t.lowestObserverState=ot.STALE,t.observers.forEach(function(e){e.dependenciesState===ot.UP_TO_DATE&&(e.isTracing!==it.NONE&&Mt(e,t),e.onBecomeStale()),e.dependenciesState=ot.STALE})}(this),Rt()},t.prototype.toString=function(){return this.name},t}(),C=m("Atom",x);function E(t,e,n){void 0===e&&(e=v),void 0===n&&(n=v);var r=new x(t);return e!==v&&ee(r,e),n!==v&&ne(r,n),r}var j={identity:function(t,e){return t===e},structural:function(t,e){return mn(t,e)},default:function(t,e){return Object.is(t,e)}},P=Symbol("mobx did run lazy initializers"),T=Symbol("mobx pending decorators"),L={},k={};function R(t){if(!0!==t[P]){var e=t[T];if(e)for(var n in g(t,P,!0),e){var r=e[n];r.propertyCreator(t,r.prop,r.descriptor,r.decoratorTarget,r.decoratorArguments)}}}function N(t,e){return function(){var n,r=function(r,o,a,u){if(!0===u)return e(r,o,a,r,n),null;if(!Object.prototype.hasOwnProperty.call(r,T)){var s=r[T];g(r,T,i({},s))}return r[T][o]={prop:o,propertyCreator:e,descriptor:a,decoratorTarget:r,decoratorArguments:n},function(t,e){var n=e?L:k;return n[t]||(n[t]={configurable:!0,enumerable:e,get:function(){return R(this),this[t]},set:function(e){R(this),this[t]=e}})}(o,t)};return function(t){return(2===t.length||3===t.length)&&"string"==typeof t[1]||4===t.length&&!0===t[3]}(arguments)?(n=c,r.apply(null,arguments)):(n=Array.prototype.slice.call(arguments),r)}}function M(t,e,n){return Oe(t)?t:Array.isArray(t)?q.array(t,{name:n}):b(t)?q.object(t,void 0,{name:n}):w(t)?q.map(t,{name:n}):O(t)?q.set(t,{name:n}):t}function D(t){return t}function I(e){h(e);var n=N(!0,function(t,n,r,o,i){var a=r?r.initializer?r.initializer.call(t):r.value:void 0;cn(t).addObservableProp(n,a,e)}),r=(void 0!==t&&t.env,n);return r.enhancer=e,r}var U={deep:!0,name:void 0,defaultDecorator:void 0,proxy:!0};function B(t){return null===t||void 0===t?U:"string"==typeof t?{name:t,deep:!0,proxy:!0}:t}Object.freeze(U);var V=I(M),G=I(function(t,e,n){return void 0===t||null===t?t:dn(t)||Ze(t)||rn(t)||un(t)?t:Array.isArray(t)?q.array(t,{name:n,deep:!1}):b(t)?q.object(t,void 0,{name:n,deep:!1}):w(t)?q.map(t,{name:n,deep:!1}):O(t)?q.set(t,{name:n,deep:!1}):p(!1)}),z=I(D),H=I(function(t,e,n){return mn(t,e)?e:t});function K(t){return t.defaultDecorator?t.defaultDecorator.enhancer:!1===t.deep?D:M}var W={box:function(t,e){arguments.length>2&&Y("box");var n=B(e);return new at(t,K(n),n.name,!0,n.equals)},array:function(t,e){arguments.length>2&&Y("array");var n=B(e);return function(t,e,n,r){void 0===n&&(n="ObservableArray@"+f());void 0===r&&(r=!1);var o=new Je(n,e,r);!function(t,e,n){Object.defineProperty(t,e,{enumerable:!1,writable:!1,configurable:!0,value:n})}(o.values,A,o);var i=new Proxy(o.values,Ye);if(o.proxy=i,t&&t.length){var a=et(!0);o.spliceWithArray(0,0,t),nt(a)}return i}(t,K(n),n.name)},map:function(t,e){arguments.length>2&&Y("map");var n=B(e);return new tn(t,K(n),n.name)},set:function(t,e){arguments.length>2&&Y("set");var n=B(e);return new an(t,K(n),n.name)},object:function(t,e,n){"string"==typeof arguments[1]&&Y("object");var r=B(n);if(!1===r.proxy)return ae({},t,e,r);var o=ue(r),i=function(t){var e=new Proxy(t,Ve);return t[A].proxy=e,e}(ae({},void 0,void 0,r));return se(i,t,e,o),i},ref:z,shallow:G,deep:V,struct:H},q=function(t,e,n){if("string"==typeof arguments[1])return V.apply(null,arguments);if(Oe(t))return t;var r=b(t)?q.object(t,e,n):Array.isArray(t)?q.array(t,e):w(t)?q.map(t,e):O(t)?q.set(t,e):t;if(r!==t)return r;p(!1)};function Y(t){p("Expected one or two arguments to observable."+t+". Did you accidentally try to use observable."+t+" as decorator?")}Object.keys(W).forEach(function(t){return q[t]=W[t]});var J=N(!1,function(t,e,n,r,o){var a=n.get,u=n.set,s=o[0]||{};cn(t).addComputedProp(t,e,i({get:a,set:u,context:t},s))}),F=J({equals:j.structural}),$=function(t,e,n){if("string"==typeof e)return J.apply(null,arguments);if(null!==t&&"object"==typeof t&&1===arguments.length)return J.apply(null,arguments);var r="object"==typeof e?e:{};return r.get=t,r.set="function"==typeof e?e:r.set,r.name=r.name||t.name||"",new st(r)};function X(t,e,n){var r=function(){return Z(t,e,n||this,arguments)};return r.isMobxAction=!0,r}function Z(t,e,n,r){var o=function(t,e,n,r){var o=!1,i=0;var a=gt();kt();var u=et(!0);return{prevDerivation:a,prevAllowStateChanges:u,notifySpy:o,startTime:i}}(),i=!0;try{var a=e.apply(n,r);return i=!1,a}finally{i?(xt.suppressReactionErrors=i,Q(o),xt.suppressReactionErrors=!1):Q(o)}}function Q(t){nt(t.prevAllowStateChanges),Rt(),mt(t.prevDerivation),t.notifySpy}function tt(t,e){var n,r=et(t);try{n=e()}finally{nt(r)}return n}function et(t){var e=xt.allowStateChanges;return xt.allowStateChanges=t,e}function nt(t){xt.allowStateChanges=t}function rt(t){var e,n=xt.computationDepth;xt.computationDepth=0;try{e=t()}finally{xt.computationDepth=n}return e}$.struct=F;var ot,it,at=function(t){function e(e,n,r,o,i){void 0===r&&(r="ObservableValue@"+f()),void 0===o&&(o=!0),void 0===i&&(i=j.default);var a=t.call(this,r)||this;return a.enhancer=n,a.name=r,a.equals=i,a.hasUnreportedChange=!1,a.value=n(e,void 0,r),a}return function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}(e,t),e.prototype.dehanceValue=function(t){return void 0!==this.dehancer?this.dehancer(t):t},e.prototype.set=function(t){this.value;if((t=this.prepareNewValue(t))!==xt.UNCHANGED){0,this.setNewValue(t)}},e.prototype.prepareNewValue=function(t){if(dt(this),Ge(this)){var e=He(this,{object:this,type:"update",newValue:t});if(!e)return xt.UNCHANGED;t=e.newValue}return t=this.enhancer(t,this.value,this.name),this.equals(this.value,t)?xt.UNCHANGED:t},e.prototype.setNewValue=function(t){var e=this.value;this.value=t,this.reportChanged(),Ke(this)&&qe(this,{type:"update",object:this,newValue:t,oldValue:e})},e.prototype.get=function(){return this.reportObserved(),this.dehanceValue(this.value)},e.prototype.intercept=function(t){return ze(this,t)},e.prototype.observe=function(t,e){return e&&t({object:this,type:"update",newValue:this.value,oldValue:void 0}),We(this,t)},e.prototype.toJSON=function(){return this.get()},e.prototype.toString=function(){return this.name+"["+this.value+"]"},e.prototype.valueOf=function(){return S(this.get())},e.prototype[Symbol.toPrimitive]=function(){return this.valueOf()},e}(x),ut=m("ObservableValue",at),st=function(){function t(t){this.dependenciesState=ot.NOT_TRACKING,this.observing=[],this.newObserving=null,this.isBeingObserved=!1,this.isPendingUnobservation=!1,this.observers=new Set,this.diffValue=0,this.runId=0,this.lastAccessedBy=0,this.lowestObserverState=ot.UP_TO_DATE,this.unboundDepsCount=0,this.__mapid="#"+f(),this.value=new lt(null),this.isComputing=!1,this.isRunningSetter=!1,this.isTracing=it.NONE,this.derivation=t.get,this.name=t.name||"ComputedValue@"+f(),t.set&&(this.setter=X(this.name+"-setter",t.set)),this.equals=t.equals||(t.compareStructural||t.struct?j.structural:j.default),this.scope=t.context,this.requiresReaction=!!t.requiresReaction,this.keepAlive=!!t.keepAlive}return t.prototype.onBecomeStale=function(){!function(t){if(t.lowestObserverState!==ot.UP_TO_DATE)return;t.lowestObserverState=ot.POSSIBLY_STALE,t.observers.forEach(function(e){e.dependenciesState===ot.UP_TO_DATE&&(e.dependenciesState=ot.POSSIBLY_STALE,e.isTracing!==it.NONE&&Mt(e,t),e.onBecomeStale())})}(this)},t.prototype.onBecomeObserved=function(){this.onBecomeObservedListeners&&this.onBecomeObservedListeners.forEach(function(t){return t()})},t.prototype.onBecomeUnobserved=function(){this.onBecomeUnobservedListeners&&this.onBecomeUnobservedListeners.forEach(function(t){return t()})},t.prototype.get=function(){this.isComputing&&p("Cycle detected in computation "+this.name+": "+this.derivation),0!==xt.inBatch||0!==this.observers.size||this.keepAlive?(Nt(this),pt(this)&&this.trackAndCompute()&&function(t){if(t.lowestObserverState===ot.STALE)return;t.lowestObserverState=ot.STALE,t.observers.forEach(function(e){e.dependenciesState===ot.POSSIBLY_STALE?e.dependenciesState=ot.STALE:e.dependenciesState===ot.UP_TO_DATE&&(t.lowestObserverState=ot.UP_TO_DATE)})}(this)):pt(this)&&(this.warnAboutUntrackedRead(),kt(),this.value=this.computeValue(!1),Rt());var t=this.value;if(ft(t))throw t.cause;return t},t.prototype.peek=function(){var t=this.computeValue(!1);if(ft(t))throw t.cause;return t},t.prototype.set=function(t){if(this.setter){h(!this.isRunningSetter,"The setter of computed value '"+this.name+"' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?"),this.isRunningSetter=!0;try{this.setter.call(this.scope,t)}finally{this.isRunningSetter=!1}}else h(!1,!1)},t.prototype.trackAndCompute=function(){var t=this.value,e=this.dependenciesState===ot.NOT_TRACKING,n=this.computeValue(!0),r=e||ft(t)||ft(n)||!this.equals(t,n);return r&&(this.value=n),r},t.prototype.computeValue=function(t){var e;if(this.isComputing=!0,xt.computationDepth++,t)e=vt(this,this.derivation,this.scope);else if(!0===xt.disableErrorBoundaries)e=this.derivation.call(this.scope);else try{e=this.derivation.call(this.scope)}catch(t){e=new lt(t)}return xt.computationDepth--,this.isComputing=!1,e},t.prototype.suspend=function(){this.keepAlive||(yt(this),this.value=void 0)},t.prototype.observe=function(t,e){var n=this,r=!0,o=void 0;return Xt(function(){var i=n.get();if(!r||e){var a=gt();t({type:"update",object:n,newValue:i,oldValue:o}),mt(a)}r=!1,o=i})},t.prototype.warnAboutUntrackedRead=function(){},t.prototype.toJSON=function(){return this.get()},t.prototype.toString=function(){return this.name+"["+this.derivation.toString()+"]"},t.prototype.valueOf=function(){return S(this.get())},t.prototype[Symbol.toPrimitive]=function(){return this.valueOf()},t}(),ct=m("ComputedValue",st);!function(t){t[t.NOT_TRACKING=-1]="NOT_TRACKING",t[t.UP_TO_DATE=0]="UP_TO_DATE",t[t.POSSIBLY_STALE=1]="POSSIBLY_STALE",t[t.STALE=2]="STALE"}(ot||(ot={})),function(t){t[t.NONE=0]="NONE",t[t.LOG=1]="LOG",t[t.BREAK=2]="BREAK"}(it||(it={}));var lt=function(){return function(t){this.cause=t}}();function ft(t){return t instanceof lt}function pt(t){switch(t.dependenciesState){case ot.UP_TO_DATE:return!1;case ot.NOT_TRACKING:case ot.STALE:return!0;case ot.POSSIBLY_STALE:for(var e=gt(),n=t.observing,r=n.length,o=0;o<r;o++){var i=n[o];if(ct(i)){if(xt.disableErrorBoundaries)i.get();else try{i.get()}catch(t){return mt(e),!0}if(t.dependenciesState===ot.STALE)return mt(e),!0}}return _t(t),mt(e),!1}}function ht(){return null!==xt.trackingDerivation}function dt(t){var e=t.observers.size>0;xt.computationDepth>0&&e&&p(!1),xt.allowStateChanges||!e&&"strict"!==xt.enforceActions||p(!1)}function vt(t,e,n){_t(t),t.newObserving=new Array(t.observing.length+100),t.unboundDepsCount=0,t.runId=++xt.runId;var r,o=xt.trackingDerivation;if(xt.trackingDerivation=t,!0===xt.disableErrorBoundaries)r=e.call(n);else try{r=e.call(n)}catch(t){r=new lt(t)}return xt.trackingDerivation=o,function(t){for(var e=t.observing,n=t.observing=t.newObserving,r=ot.UP_TO_DATE,o=0,i=t.unboundDepsCount,a=0;a<i;a++){var u=n[a];0===u.diffValue&&(u.diffValue=1,o!==a&&(n[o]=u),o++),u.dependenciesState>r&&(r=u.dependenciesState)}n.length=o,t.newObserving=null,i=e.length;for(;i--;){var u=e[i];0===u.diffValue&&Tt(u,t),u.diffValue=0}for(;o--;){var u=n[o];1===u.diffValue&&(u.diffValue=0,Pt(u,t))}r!==ot.UP_TO_DATE&&(t.dependenciesState=r,t.onBecomeStale())}(t),r}function yt(t){var e=t.observing;t.observing=[];for(var n=e.length;n--;)Tt(e[n],t);t.dependenciesState=ot.NOT_TRACKING}function bt(t){var e=gt();try{return t()}finally{mt(e)}}function gt(){var t=xt.trackingDerivation;return xt.trackingDerivation=null,t}function mt(t){xt.trackingDerivation=t}function _t(t){if(t.dependenciesState!==ot.UP_TO_DATE){t.dependenciesState=ot.UP_TO_DATE;for(var e=t.observing,n=e.length;n--;)e[n].lowestObserverState=ot.UP_TO_DATE}}var wt=["mobxGuid","spyListeners","enforceActions","computedRequiresReaction","disableErrorBoundaries","runId","UNCHANGED"],Ot=function(){return function(){this.version=5,this.UNCHANGED={},this.trackingDerivation=null,this.computationDepth=0,this.runId=0,this.mobxGuid=0,this.inBatch=0,this.pendingUnobservations=[],this.pendingReactions=[],this.isRunningReactions=!1,this.allowStateChanges=!0,this.enforceActions=!1,this.spyListeners=[],this.globalReactionErrorHandlers=[],this.computedRequiresReaction=!1,this.disableErrorBoundaries=!1,this.suppressReactionErrors=!1}}(),St=!0,At=!1,xt=function(){var t=jt();return t.__mobxInstanceCount>0&&!t.__mobxGlobals&&(St=!1),t.__mobxGlobals&&t.__mobxGlobals.version!==(new Ot).version&&(St=!1),St?t.__mobxGlobals?(t.__mobxInstanceCount+=1,t.__mobxGlobals.UNCHANGED||(t.__mobxGlobals.UNCHANGED={}),t.__mobxGlobals):(t.__mobxInstanceCount=1,t.__mobxGlobals=new Ot):(setTimeout(function(){At||p("There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`")},1),new Ot)}();function Ct(){return xt}function Et(){var t=new Ot;for(var e in t)-1===wt.indexOf(e)&&(xt[e]=t[e]);xt.allowStateChanges=!xt.enforceActions}function jt(){return"undefined"!=typeof window?window:r}function Pt(t,e){t.observers.add(e),t.lowestObserverState>e.dependenciesState&&(t.lowestObserverState=e.dependenciesState)}function Tt(t,e){t.observers.delete(e),0===t.observers.size&&Lt(t)}function Lt(t){!1===t.isPendingUnobservation&&(t.isPendingUnobservation=!0,xt.pendingUnobservations.push(t))}function kt(){xt.inBatch++}function Rt(){if(0==--xt.inBatch){Vt();for(var t=xt.pendingUnobservations,e=0;e<t.length;e++){var n=t[e];n.isPendingUnobservation=!1,0===n.observers.size&&(n.isBeingObserved&&(n.isBeingObserved=!1,n.onBecomeUnobserved()),n instanceof st&&n.suspend())}xt.pendingUnobservations=[]}}function Nt(t){var e=xt.trackingDerivation;return null!==e?(e.runId!==t.lastAccessedBy&&(t.lastAccessedBy=e.runId,e.newObserving[e.unboundDepsCount++]=t,t.isBeingObserved||(t.isBeingObserved=!0,t.onBecomeObserved())),!0):(0===t.observers.size&&xt.inBatch>0&&Lt(t),!1)}function Mt(t,e){if(console.log("[mobx.trace] '"+t.name+"' is invalidated due to a change in: '"+e.name+"'"),t.isTracing===it.BREAK){var n=[];!function t(e,n,r){if(n.length>=1e3)return void n.push("(and many more)");n.push(""+new Array(r).join("\t")+e.name);e.dependencies&&e.dependencies.forEach(function(e){return t(e,n,r+1)})}(ce(t),n,1),new Function("debugger;\n/*\nTracing '"+t.name+"'\n\nYou are entering this break point because derivation '"+t.name+"' is being traced and '"+e.name+"' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n"+(t instanceof st?t.derivation.toString().replace(/[*]\//g,"/"):"")+"\n\nThe dependencies for this derivation are:\n\n"+n.join("\n")+"\n*/\n    ")()}}var Dt=function(){function t(t,e,n){void 0===t&&(t="Reaction@"+f()),this.name=t,this.onInvalidate=e,this.errorHandler=n,this.observing=[],this.newObserving=[],this.dependenciesState=ot.NOT_TRACKING,this.diffValue=0,this.runId=0,this.unboundDepsCount=0,this.__mapid="#"+f(),this.isDisposed=!1,this._isScheduled=!1,this._isTrackPending=!1,this._isRunning=!1,this.isTracing=it.NONE}return t.prototype.onBecomeStale=function(){this.schedule()},t.prototype.schedule=function(){this._isScheduled||(this._isScheduled=!0,xt.pendingReactions.push(this),Vt())},t.prototype.isScheduled=function(){return this._isScheduled},t.prototype.runReaction=function(){if(!this.isDisposed){if(kt(),this._isScheduled=!1,pt(this)){this._isTrackPending=!0;try{this.onInvalidate(),this._isTrackPending}catch(t){this.reportExceptionInDerivation(t)}}Rt()}},t.prototype.track=function(t){this.isDisposed&&p("Reaction already disposed"),kt();this._isRunning=!0;var e=vt(this,t,void 0);this._isRunning=!1,this._isTrackPending=!1,this.isDisposed&&yt(this),ft(e)&&this.reportExceptionInDerivation(e.cause),Rt()},t.prototype.reportExceptionInDerivation=function(t){var e=this;if(this.errorHandler)this.errorHandler(t,this);else{if(xt.disableErrorBoundaries)throw t;var n="[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '"+this+"'";xt.suppressReactionErrors?console.warn("[mobx] (error in reaction '"+this.name+"' suppressed, fix error of causing action below)"):console.error(n,t),xt.globalReactionErrorHandlers.forEach(function(n){return n(t,e)})}},t.prototype.dispose=function(){this.isDisposed||(this.isDisposed=!0,this._isRunning||(kt(),yt(this),Rt()))},t.prototype.getDisposer=function(){var t=this.dispose.bind(this);return t[A]=this,t},t.prototype.toString=function(){return"Reaction["+this.name+"]"},t.prototype.trace=function(t){void 0===t&&(t=!1),Me(this,t)},t}();function It(t){return xt.globalReactionErrorHandlers.push(t),function(){var e=xt.globalReactionErrorHandlers.indexOf(t);e>=0&&xt.globalReactionErrorHandlers.splice(e,1)}}var Ut=100,Bt=function(t){return t()};function Vt(){xt.inBatch>0||xt.isRunningReactions||Bt(Gt)}function Gt(){xt.isRunningReactions=!0;for(var t=xt.pendingReactions,e=0;t.length>0;){++e===Ut&&(console.error("Reaction doesn't converge to a stable state after "+Ut+" iterations. Probably there is a cycle in the reactive function: "+t[0]),t.splice(0));for(var n=t.splice(0),r=0,o=n.length;r<o;r++)n[r].runReaction()}xt.isRunningReactions=!1}var zt=m("Reaction",Dt);function Ht(t){var e=Bt;Bt=function(n){return t(function(){return e(n)})}}function Kt(t){return console.warn("[mobx.spy] Is a no-op in production builds"),function(){}}function Wt(){p(!1)}function qt(t){return function(e,n,r){if(r){if(r.value)return{value:X(t,r.value),enumerable:!1,configurable:!0,writable:!0};var o=r.initializer;return{enumerable:!1,configurable:!0,writable:!0,initializer:function(){return X(t,o.call(this))}}}return function(t){return function(e,n,r){Object.defineProperty(e,n,{configurable:!0,enumerable:!1,get:function(){},set:function(e){g(this,n,Yt(t,e))}})}}(t).apply(this,arguments)}}var Yt=function(t,e,n,r){return 1===arguments.length&&"function"==typeof t?X(t.name||"<unnamed action>",t):2===arguments.length&&"function"==typeof e?X(t,e):1===arguments.length&&"string"==typeof t?qt(t):!0!==r?qt(e).apply(null,arguments):void g(t,e,X(t.name||e,n.value,this))};function Jt(t,e){"string"==typeof t||t.name;return Z(0,"function"==typeof t?t:e,this,void 0)}function Ft(t){return"function"==typeof t&&!0===t.isMobxAction}function $t(t,e,n){g(t,e,X(e,n.bind(t)))}function Xt(t,e){void 0===e&&(e=l);var n,r=e&&e.name||t.name||"Autorun@"+f();if(!e.scheduler&&!e.delay)n=new Dt(r,function(){this.track(a)},e.onError);else{var o=Qt(e),i=!1;n=new Dt(r,function(){i||(i=!0,o(function(){i=!1,n.isDisposed||n.track(a)}))},e.onError)}function a(){t(n)}return n.schedule(),n.getDisposer()}Yt.bound=function(t,e,n,r){return!0===r?($t(t,e,n.value),null):n?{configurable:!0,enumerable:!1,get:function(){return $t(this,e,n.value||n.initializer.call(this)),this[e]},set:Wt}:{enumerable:!1,configurable:!0,set:function(t){$t(this,e,t)},get:function(){}}};var Zt=function(t){return t()};function Qt(t){return t.scheduler?t.scheduler:t.delay?function(e){return setTimeout(e,t.delay)}:Zt}function te(t,e,n){void 0===n&&(n=l);var r,o=n.name||"Reaction@"+f(),i=Yt(o,n.onError?function(t,e){return function(){try{return e.apply(this,arguments)}catch(e){t.call(this,e)}}}(n.onError,e):e),a=!n.scheduler&&!n.delay,u=Qt(n),s=!0,c=!1,p=n.compareStructural?j.structural:n.equals||j.default,h=new Dt(o,function(){s||a?d():c||(c=!0,u(d))},n.onError);function d(){if(c=!1,!h.isDisposed){var e=!1;h.track(function(){var n=t(h);e=s||!p(r,n),r=n}),s&&n.fireImmediately&&i(r,h),s||!0!==e||i(r,h),s&&(s=!1)}}return h.schedule(),h.getDisposer()}function ee(t,e,n){return re("onBecomeObserved",t,e,n)}function ne(t,e,n){return re("onBecomeUnobserved",t,e,n)}function re(t,e,n,r){var o="string"==typeof n?vn(e,n):vn(e),i="string"==typeof n?r:n,a=t+"Listeners";return o[a]?o[a].add(i):o[a]=new Set([i]),"function"!=typeof o[t]?p(!1):function(){var t=o[a];t&&(t.delete(i),0===t.size&&delete o[a])}}function oe(t){var e=t.enforceActions,n=t.computedRequiresReaction,r=t.disableErrorBoundaries,o=t.reactionScheduler;if(!0===t.isolateGlobalState&&((xt.pendingReactions.length||xt.inBatch||xt.isRunningReactions)&&p("isolateGlobalState should be called before MobX is running any reactions"),At=!0,St&&(0==--jt().__mobxInstanceCount&&(jt().__mobxGlobals=void 0),xt=new Ot)),void 0!==e){var i=void 0;switch(e){case!0:case"observed":i=!0;break;case!1:case"never":i=!1;break;case"strict":case"always":i="strict";break;default:p("Invalid value for 'enforceActions': '"+e+"', expected 'never', 'always' or 'observed'")}xt.enforceActions=i,xt.allowStateChanges=!0!==i&&"strict"!==i}void 0!==n&&(xt.computedRequiresReaction=!!n),void 0!==r&&(!0===r&&console.warn("WARNING: Debug feature only. MobX will NOT recover from errors when `disableErrorBoundaries` is enabled."),xt.disableErrorBoundaries=!!r),o&&Ht(o)}function ie(t,e){var n="function"==typeof t?t.prototype:t,r=function(t){var r=e[t];Array.isArray(r)||(r=[r]);var o=Object.getOwnPropertyDescriptor(n,t),i=r.reduce(function(e,r){return r(n,t,e)},o);i&&Object.defineProperty(n,t,i)};for(var o in e)r(o);return t}function ae(t,e,n,r){var o=ue(r=B(r));return R(t),cn(t,r.name,o.enhancer),e&&se(t,e,n,o),t}function ue(t){return t.defaultDecorator||(!1===t.deep?z:V)}function se(t,e,n,r){kt();try{for(var o in e){var i=Object.getOwnPropertyDescriptor(e,o);0;var a=(n&&o in n?n[o]:i.get?J:r)(t,o,i,!0);a&&Object.defineProperty(t,o,a)}}finally{Rt()}}function ce(t,e){return le(vn(t,e))}function le(t){var e={name:t.name};return t.observing&&t.observing.length>0&&(e.dependencies=function(t){var e=[];return t.forEach(function(t){-1===e.indexOf(t)&&e.push(t)}),e}(t.observing).map(le)),e}function fe(t,e){return pe(vn(t,e))}function pe(t){var e={name:t.name};return function(t){return t.observers&&t.observers.size>0}(t)&&(e.observers=Array.from(function(t){return t.observers}(t)).map(pe)),e}var he=0;function de(t){1!==arguments.length&&p("Flow expects one 1 argument and cannot be used as decorator");var e=t.name||"<unnamed flow>";return function(){var n,r=arguments,o=++he,i=Yt(e+" - runid: "+o+" - init",t).apply(this,r),a=void 0,u=new Promise(function(t,r){var u=0;function s(t){var n;a=void 0;try{n=Yt(e+" - runid: "+o+" - yield "+u++,i.next).call(i,t)}catch(t){return r(t)}l(n)}function c(t){var n;a=void 0;try{n=Yt(e+" - runid: "+o+" - yield "+u++,i.throw).call(i,t)}catch(t){return r(t)}l(n)}function l(e){if(!e||"function"!=typeof e.then)return e.done?t(e.value):(a=Promise.resolve(e.value)).then(s,c);e.then(l,r)}n=r,s(void 0)});return u.cancel=Yt(e+" - runid: "+o+" - cancel",function(){try{a&&ve(a);var t=i.return(),e=Promise.resolve(t.value);e.then(v,v),ve(e),n(new Error("FLOW_CANCELLED"))}catch(t){n(t)}}),u}}function ve(t){"function"==typeof t.cancel&&t.cancel()}function ye(t,e,n){var r;if(rn(t)||Ze(t)||ut(t))r=yn(t);else{if(!dn(t))return p(!1);if("string"!=typeof e)return p(!1);r=yn(t,e)}return void 0!==r.dehancer?p(!1):(r.dehancer="function"==typeof e?e:n,function(){r.dehancer=void 0})}function be(t,e,n){return"function"==typeof n?function(t,e,n){return yn(t,e).intercept(n)}(t,e,n):function(t,e){return yn(t).intercept(e)}(t,e)}function ge(t,e){if(null===t||void 0===t)return!1;if(void 0!==e){if(!1===dn(t))return!1;if(!t[A].values.has(e))return!1;var n=vn(t,e);return ct(n)}return ct(t)}function me(t){return arguments.length>1?p(!1):ge(t)}function _e(t,e){return"string"!=typeof e?p(!1):ge(t,e)}function we(t,e){return null!==t&&void 0!==t&&(void 0!==e?!!dn(t)&&t[A].values.has(e):dn(t)||!!t[A]||C(t)||zt(t)||ct(t))}function Oe(t){return 1!==arguments.length&&p(!1),we(t)}function Se(t,e){return"string"!=typeof e?p(!1):we(t,e)}function Ae(t){return dn(t)?t[A].getKeys():rn(t)?Array.from(t.keys()):un(t)?Array.from(t.keys()):Ze(t)?t.map(function(t,e){return e}):p(!1)}function xe(t){return dn(t)?Ae(t).map(function(e){return t[e]}):rn(t)?Ae(t).map(function(e){return t.get(e)}):un(t)?Array.from(t.values()):Ze(t)?t.slice():p(!1)}function Ce(t){return dn(t)?Ae(t).map(function(e){return[e,t[e]]}):rn(t)?Ae(t).map(function(e){return[e,t.get(e)]}):un(t)?Array.from(t.entries()):Ze(t)?t.map(function(t,e){return[e,t]}):p(!1)}function Ee(t,e,n){if(2!==arguments.length)if(dn(t)){var r=t[A];r.values.get(e)?r.write(e,n):r.addObservableProp(e,n,r.defaultEnhancer)}else if(rn(t))t.set(e,n);else{if(!Ze(t))return p(!1);"number"!=typeof e&&(e=parseInt(e,10)),h(e>=0,"Not a valid index: '"+e+"'"),kt(),e>=t.length&&(t.length=e+1),t[e]=n,Rt()}else{kt();var o=e;try{for(var i in o)Ee(t,i,o[i])}finally{Rt()}}}function je(t,e){if(dn(t))t[A].remove(e);else if(rn(t))t.delete(e);else if(un(t))t.delete(e);else{if(!Ze(t))return p(!1);"number"!=typeof e&&(e=parseInt(e,10)),h(e>=0,"Not a valid index: '"+e+"'"),t.splice(e,1)}}function Pe(t,e){return dn(t)?yn(t).has(e):rn(t)?t.has(e):un(t)?t.has(e):Ze(t)?e>=0&&e<t.length:p(!1)}function Te(t,e){if(Pe(t,e))return dn(t)?t[e]:rn(t)?t.get(e):Ze(t)?t[e]:p(!1)}function Le(t,e,n,r){return"function"==typeof n?function(t,e,n,r){return yn(t,e).observe(n,r)}(t,e,n,r):function(t,e,n){return yn(t).observe(e,n)}(t,e,n)}var ke={detectCycles:!0,exportMapsAsObjects:!0,recurseEverything:!1};function Re(t,e,n,r){return r.detectCycles&&t.set(e,n),n}function Ne(t,e){var n;return"boolean"==typeof e&&(e={detectCycles:e}),e||(e=ke),e.detectCycles=void 0===e.detectCycles?!0===e.recurseEverything:!0===e.detectCycles,e.detectCycles&&(n=new Map),function t(e,n,r){if(!n.recurseEverything&&!Oe(e))return e;if("object"!=typeof e)return e;if(null===e)return null;if(e instanceof Date)return e;if(ut(e))return t(e.get(),n,r);if(Oe(e)&&Ae(e),!0===n.detectCycles&&null!==e&&r.has(e))return r.get(e);if(Ze(e)||Array.isArray(e)){var o=Re(r,e,[],n),i=e.map(function(e){return t(e,n,r)});o.length=i.length;for(var a=0,u=i.length;a<u;a++)o[a]=i[a];return o}if(un(e)||Object.getPrototypeOf(e)===Set.prototype){if(!1===n.exportMapsAsObjects){var s=Re(r,e,new Set,n);return e.forEach(function(e){s.add(t(e,n,r))}),s}var c=Re(r,e,[],n);return e.forEach(function(e){c.push(t(e,n,r))}),c}if(rn(e)||Object.getPrototypeOf(e)===Map.prototype){if(!1===n.exportMapsAsObjects){var l=Re(r,e,new Map,n);return e.forEach(function(e,o){l.set(o,t(e,n,r))}),l}var f=Re(r,e,{},n);return e.forEach(function(e,o){f[o]=t(e,n,r)}),f}var p=Re(r,e,{},n);for(var h in e)p[h]=t(e[h],n,r);return p}(t,e,n)}function Me(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=!1;"boolean"==typeof t[t.length-1]&&(n=t.pop());var r=function(t){switch(t.length){case 0:return xt.trackingDerivation;case 1:return vn(t[0]);case 2:return vn(t[0],t[1])}}(t);if(!r)return p(!1);r.isTracing===it.NONE&&console.log("[mobx.trace] '"+r.name+"' tracing enabled"),r.isTracing=n?it.BREAK:it.LOG}function De(t,e){void 0===e&&(e=void 0),kt();try{return t.apply(e)}finally{Rt()}}function Ie(t,e,n){return 1===arguments.length||e&&"object"==typeof e?function(t,e){0;var n,r=new Promise(function(r,o){var a=Ue(t,r,i({},e,{onError:o}));n=function(){a(),o("WHEN_CANCELLED")}});return r.cancel=n,r}(t,e):Ue(t,e,n||{})}function Ue(t,e,n){var r;"number"==typeof n.timeout&&(r=setTimeout(function(){if(!i[A].isDisposed){i();var t=new Error("WHEN_TIMEOUT");if(!n.onError)throw t;n.onError(t)}},n.timeout)),n.name=n.name||"When@"+f();var o=X(n.name+"-effect",e),i=Xt(function(e){t()&&(e.dispose(),r&&clearTimeout(r),o())},n);return i}function Be(t){return t[A]}var Ve={has:function(t,e){if(e===A||"constructor"===e||e===P)return!0;var n=Be(t);return"string"==typeof e?n.has(e):e in t},get:function(t,e){if(e===A||"constructor"===e||e===P)return t[e];var n=Be(t),r=n.values.get(e);if(r instanceof x){var o=r.get();return void 0===o&&n.has(e),o}return"string"==typeof e&&n.has(e),t[e]},set:function(t,e,n){return"string"==typeof e&&(Ee(t,e,n),!0)},deleteProperty:function(t,e){return"string"==typeof e&&(Be(t).remove(e),!0)},ownKeys:function(t){return Be(t).keysAtom.reportObserved(),Reflect.ownKeys(t)},preventExtensions:function(t){return p("Dynamic observable objects cannot be frozen"),!1}};function Ge(t){return void 0!==t.interceptors&&t.interceptors.length>0}function ze(t,e){var n=t.interceptors||(t.interceptors=[]);return n.push(e),d(function(){var t=n.indexOf(e);-1!==t&&n.splice(t,1)})}function He(t,e){var n=gt();try{var r=t.interceptors;if(r)for(var o=0,i=r.length;o<i&&(h(!(e=r[o](e))||e.type,"Intercept handlers should return nothing or a change object"),e);o++);return e}finally{mt(n)}}function Ke(t){return void 0!==t.changeListeners&&t.changeListeners.length>0}function We(t,e){var n=t.changeListeners||(t.changeListeners=[]);return n.push(e),d(function(){var t=n.indexOf(e);-1!==t&&n.splice(t,1)})}function qe(t,e){var n=gt(),r=t.changeListeners;if(r){for(var o=0,i=(r=r.slice()).length;o<i;o++)r[o](e);mt(n)}}var Ye={get:function(t,e){return e===A?t[A]:"length"===e?t[A].getArrayLength():"number"==typeof e?Fe.get.call(t,e):"string"!=typeof e||isNaN(e)?Fe.hasOwnProperty(e)?Fe[e]:t[e]:Fe.get.call(t,parseInt(e))},set:function(t,e,n){return"length"===e?(t[A].setArrayLength(n),!0):"number"==typeof e?(Fe.set.call(t,e,n),!0):!isNaN(e)&&(Fe.set.call(t,parseInt(e),n),!0)},preventExtensions:function(t){return p("Observable arrays cannot be frozen"),!1}};var Je=function(){function t(t,e,n){this.owned=n,this.values=[],this.proxy=void 0,this.lastKnownLength=0,this.atom=new x(t||"ObservableArray@"+f()),this.enhancer=function(n,r){return e(n,r,t+"[..]")}}return t.prototype.dehanceValue=function(t){return void 0!==this.dehancer?this.dehancer(t):t},t.prototype.dehanceValues=function(t){return void 0!==this.dehancer&&t.length>0?t.map(this.dehancer):t},t.prototype.intercept=function(t){return ze(this,t)},t.prototype.observe=function(t,e){return void 0===e&&(e=!1),e&&t({object:this.proxy,type:"splice",index:0,added:this.values.slice(),addedCount:this.values.length,removed:[],removedCount:0}),We(this,t)},t.prototype.getArrayLength=function(){return this.atom.reportObserved(),this.values.length},t.prototype.setArrayLength=function(t){if("number"!=typeof t||t<0)throw new Error("[mobx.array] Out of range: "+t);var e=this.values.length;if(t!==e)if(t>e){for(var n=new Array(t-e),r=0;r<t-e;r++)n[r]=void 0;this.spliceWithArray(e,0,n)}else this.spliceWithArray(t,e-t)},t.prototype.updateArrayLength=function(t,e){if(t!==this.lastKnownLength)throw new Error("[mobx] Modification exception: the internal structure of an observable array was changed.");this.lastKnownLength+=e},t.prototype.spliceWithArray=function(t,e,n){var r=this;dt(this.atom);var o=this.values.length;if(void 0===t?t=0:t>o?t=o:t<0&&(t=Math.max(0,o+t)),e=1===arguments.length?o-t:void 0===e||null===e?0:Math.max(0,Math.min(e,o-t)),void 0===n&&(n=c),Ge(this)){var i=He(this,{object:this.proxy,type:"splice",index:t,removedCount:e,added:n});if(!i)return c;e=i.removedCount,n=i.added}n=0===n.length?n:n.map(function(t){return r.enhancer(t,void 0)});var a=this.spliceItemsIntoValues(t,e,n);return 0===e&&0===n.length||this.notifyArraySplice(t,n,a),this.dehanceValues(a)},t.prototype.spliceItemsIntoValues=function(t,e,n){var r;if(n.length<1e4)return(r=this.values).splice.apply(r,function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(u(arguments[e]));return t}([t,e],n));var o=this.values.slice(t,t+e);return this.values=this.values.slice(0,t).concat(n,this.values.slice(t+e)),o},t.prototype.notifyArrayChildUpdate=function(t,e,n){var r=!this.owned&&!1,o=Ke(this),i=o||r?{object:this.proxy,type:"update",index:t,newValue:e,oldValue:n}:null;this.atom.reportChanged(),o&&qe(this,i)},t.prototype.notifyArraySplice=function(t,e,n){var r=!this.owned&&!1,o=Ke(this),i=o||r?{object:this.proxy,type:"splice",index:t,removed:n,added:e,removedCount:n.length,addedCount:e.length}:null;this.atom.reportChanged(),o&&qe(this,i)},t}(),Fe={intercept:function(t){return this[A].intercept(t)},observe:function(t,e){return void 0===e&&(e=!1),this[A].observe(t,e)},clear:function(){return this.splice(0)},replace:function(t){var e=this[A];return e.spliceWithArray(0,e.values.length,t)},toJS:function(){return this.slice()},toJSON:function(){return this.toJS()},splice:function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var o=this[A];switch(arguments.length){case 0:return[];case 1:return o.spliceWithArray(t);case 2:return o.spliceWithArray(t,e)}return o.spliceWithArray(t,e,n)},spliceWithArray:function(t,e,n){return this[A].spliceWithArray(t,e,n)},push:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=this[A];return n.spliceWithArray(n.values.length,0,t),n.values.length},pop:function(){return this.splice(Math.max(this[A].values.length-1,0),1)[0]},shift:function(){return this.splice(0,1)[0]},unshift:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=this[A];return n.spliceWithArray(0,0,t),n.values.length},reverse:function(){var t=this.slice();return t.reverse.apply(t,arguments)},sort:function(t){var e=this.slice();return e.sort.apply(e,arguments)},remove:function(t){var e=this[A],n=e.dehanceValues(e.values).indexOf(t);return n>-1&&(this.splice(n,1),!0)},get:function(t){var e=this[A];if(e){if(t<e.values.length)return e.atom.reportObserved(),e.dehanceValue(e.values[t]);console.warn("[mobx.array] Attempt to read an array index ("+t+") that is out of bounds ("+e.values.length+"). Please check length first. Out of bound indices will not be tracked by MobX")}},set:function(t,e){var n=this[A],r=n.values;if(t<r.length){dt(n.atom);var o=r[t];if(Ge(n)){var i=He(n,{type:"update",object:this,index:t,newValue:e});if(!i)return;e=i.newValue}(e=n.enhancer(e,o))!==o&&(r[t]=e,n.notifyArrayChildUpdate(t,e,o))}else{if(t!==r.length)throw new Error("[mobx.array] Index out of bounds, "+t+" is larger than "+r.length);n.spliceWithArray(t,0,[e])}}};["concat","every","filter","forEach","indexOf","join","lastIndexOf","map","reduce","reduceRight","slice","some","toString","toLocaleString"].forEach(function(t){Fe[t]=function(){var e=this[A];e.atom.reportObserved();var n=e.dehanceValues(e.values);return n[t].apply(n,arguments)}});var $e,Xe=m("ObservableArrayAdministration",Je);function Ze(t){return y(t)&&Xe(t[A])}var Qe={},tn=function(){function t(t,e,n){if(void 0===e&&(e=M),void 0===n&&(n="ObservableMap@"+f()),this.enhancer=e,this.name=n,this[$e]=Qe,this._keysAtom=E(this.name+".keys()"),this[Symbol.toStringTag]="Map","function"!=typeof Map)throw new Error("mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js");this._data=new Map,this._hasMap=new Map,this.merge(t)}return t.prototype._has=function(t){return this._data.has(t)},t.prototype.has=function(t){return this._hasMap.has(t)?this._hasMap.get(t).get():this._updateHasMapEntry(t,!1).get()},t.prototype.set=function(t,e){var n=this._has(t);if(Ge(this)){var r=He(this,{type:n?"update":"add",object:this,newValue:e,name:t});if(!r)return this;e=r.newValue}return n?this._updateValue(t,e):this._addValue(t,e),this},t.prototype.delete=function(t){var e=this;if(Ge(this)&&!(r=He(this,{type:"delete",object:this,name:t})))return!1;if(this._has(t)){var n=Ke(this),r=n?{type:"delete",object:this,oldValue:this._data.get(t).value,name:t}:null;return De(function(){e._keysAtom.reportChanged(),e._updateHasMapEntry(t,!1),e._data.get(t).setNewValue(void 0),e._data.delete(t)}),n&&qe(this,r),!0}return!1},t.prototype._updateHasMapEntry=function(t,e){var n=this._hasMap.get(t);return n?n.setNewValue(e):(n=new at(e,D,this.name+"."+en(t)+"?",!1),this._hasMap.set(t,n)),n},t.prototype._updateValue=function(t,e){var n=this._data.get(t);if((e=n.prepareNewValue(e))!==xt.UNCHANGED){var r=Ke(this),o=r?{type:"update",object:this,oldValue:n.value,name:t,newValue:e}:null;0,n.setNewValue(e),r&&qe(this,o)}},t.prototype._addValue=function(t,e){var n=this;dt(this._keysAtom),De(function(){var r=new at(e,n.enhancer,n.name+"."+en(t),!1);n._data.set(t,r),e=r.value,n._updateHasMapEntry(t,!0),n._keysAtom.reportChanged()});var r=Ke(this),o=r?{type:"add",object:this,name:t,newValue:e}:null;r&&qe(this,o)},t.prototype.get=function(t){return this.has(t)?this.dehanceValue(this._data.get(t).get()):this.dehanceValue(void 0)},t.prototype.dehanceValue=function(t){return void 0!==this.dehancer?this.dehancer(t):t},t.prototype.keys=function(){return this._keysAtom.reportObserved(),this._data.keys()},t.prototype.values=function(){var t=this,e=0,n=Array.from(this.keys());return Sn({next:function(){return e<n.length?{value:t.get(n[e++]),done:!1}:{done:!0}}})},t.prototype.entries=function(){var t=this,e=0,n=Array.from(this.keys());return Sn({next:function(){if(e<n.length){var r=n[e++];return{value:[r,t.get(r)],done:!1}}return{done:!0}}})},t.prototype[($e=A,Symbol.iterator)]=function(){return this.entries()},t.prototype.forEach=function(t,e){var n,r;try{for(var o=a(this),i=o.next();!i.done;i=o.next()){var s=u(i.value,2),c=s[0],l=s[1];t.call(e,l,c,this)}}catch(t){n={error:t}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}},t.prototype.merge=function(t){var e=this;return rn(t)&&(t=t.toJS()),De(function(){b(t)?Object.keys(t).forEach(function(n){return e.set(n,t[n])}):Array.isArray(t)?t.forEach(function(t){var n=u(t,2),r=n[0],o=n[1];return e.set(r,o)}):w(t)?(t.constructor!==Map&&p("Cannot initialize from classes that inherit from Map: "+t.constructor.name),t.forEach(function(t,n){return e.set(n,t)})):null!==t&&void 0!==t&&p("Cannot initialize map from "+t)}),this},t.prototype.clear=function(){var t=this;De(function(){bt(function(){var e,n;try{for(var r=a(t.keys()),o=r.next();!o.done;o=r.next()){var i=o.value;t.delete(i)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}})})},t.prototype.replace=function(t){var e=this;return De(function(){var n=function(t){return b(t)?Object.keys(t):Array.isArray(t)?t.map(function(t){return u(t,1)[0]}):w(t)||rn(t)?Array.from(t.keys()):p("Cannot get keys from '"+t+"'")}(t);Array.from(e.keys()).filter(function(t){return-1===n.indexOf(t)}).forEach(function(t){return e.delete(t)}),e.merge(t)}),this},Object.defineProperty(t.prototype,"size",{get:function(){return this._keysAtom.reportObserved(),this._data.size},enumerable:!0,configurable:!0}),t.prototype.toPOJO=function(){var t,e,n={};try{for(var r=a(this),o=r.next();!o.done;o=r.next()){var i=u(o.value,2),s=i[0],c=i[1];n["symbol"==typeof s?s:en(s)]=c}}catch(e){t={error:e}}finally{try{o&&!o.done&&(e=r.return)&&e.call(r)}finally{if(t)throw t.error}}return n},t.prototype.toJS=function(){return new Map(this)},t.prototype.toJSON=function(){return this.toPOJO()},t.prototype.toString=function(){var t=this;return this.name+"[{ "+Array.from(this.keys()).map(function(e){return en(e)+": "+t.get(e)}).join(", ")+" }]"},t.prototype.observe=function(t,e){return We(this,t)},t.prototype.intercept=function(t){return ze(this,t)},t}();function en(t){return t&&t.toString?t.toString():new String(t).toString()}var nn,rn=m("ObservableMap",tn),on={},an=function(){function t(t,e,n){if(void 0===e&&(e=M),void 0===n&&(n="ObservableSet@"+f()),this.name=n,this[nn]=on,this._data=new Set,this._atom=E(this.name),this[Symbol.toStringTag]="Set","function"!=typeof Set)throw new Error("mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js");this.enhancer=function(t,r){return e(t,r,n)},t&&this.replace(t)}return t.prototype.dehanceValue=function(t){return void 0!==this.dehancer?this.dehancer(t):t},t.prototype.clear=function(){var t=this;De(function(){bt(function(){var e,n;try{for(var r=a(t._data.values()),o=r.next();!o.done;o=r.next()){var i=o.value;t.delete(i)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}})})},t.prototype.forEach=function(t,e){var n,r;try{for(var o=a(this),i=o.next();!i.done;i=o.next()){var u=i.value;t.call(e,u,u,this)}}catch(t){n={error:t}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}},Object.defineProperty(t.prototype,"size",{get:function(){return this._atom.reportObserved(),this._data.size},enumerable:!0,configurable:!0}),t.prototype.add=function(t){var e=this;if((dt(this._atom),Ge(this))&&!(r=He(this,{type:"add",object:this,newValue:t})))return this;if(!this.has(t)){De(function(){e._data.add(e.enhancer(t,void 0)),e._atom.reportChanged()});var n=Ke(this),r=n?{type:"add",object:this,newValue:t}:null;0,n&&qe(this,r)}return this},t.prototype.delete=function(t){var e=this;if(Ge(this)&&!(r=He(this,{type:"delete",object:this,oldValue:t})))return!1;if(this.has(t)){var n=Ke(this),r=n?{type:"delete",object:this,oldValue:t}:null;return De(function(){e._atom.reportChanged(),e._data.delete(t)}),n&&qe(this,r),!0}return!1},t.prototype.has=function(t){return this._atom.reportObserved(),this._data.has(this.dehanceValue(t))},t.prototype.entries=function(){var t=0,e=Array.from(this.keys()),n=Array.from(this.values());return Sn({next:function(){var r=t;return t+=1,r<n.length?{value:[e[r],n[r]],done:!1}:{done:!0}}})},t.prototype.keys=function(){return this.values()},t.prototype.values=function(){this._atom.reportObserved();var t=this,e=0,n=Array.from(this._data.values());return Sn({next:function(){return e<n.length?{value:t.dehanceValue(n[e++]),done:!1}:{done:!0}}})},t.prototype.replace=function(t){var e=this;return un(t)&&(t=t.toJS()),De(function(){Array.isArray(t)?(e.clear(),t.forEach(function(t){return e.add(t)})):O(t)?(e.clear(),t.forEach(function(t){return e.add(t)})):null!==t&&void 0!==t&&p("Cannot initialize set from "+t)}),this},t.prototype.observe=function(t,e){return We(this,t)},t.prototype.intercept=function(t){return ze(this,t)},t.prototype.toJS=function(){return new Set(this)},t.prototype.toString=function(){return this.name+"[ "+Array.from(this).join(", ")+" ]"},t.prototype[(nn=A,Symbol.iterator)]=function(){return this.values()},t}(),un=m("ObservableSet",an),sn=function(){function t(t,e,n,r){void 0===e&&(e=new Map),this.target=t,this.values=e,this.name=n,this.defaultEnhancer=r,this.keysAtom=new x(n+".keys")}return t.prototype.read=function(t){return this.values.get(t).get()},t.prototype.write=function(t,e){var n=this.target,r=this.values.get(t);if(r instanceof st)r.set(e);else{if(Ge(this)){if(!(i=He(this,{type:"update",object:this.proxy||n,name:t,newValue:e})))return;e=i.newValue}if((e=r.prepareNewValue(e))!==xt.UNCHANGED){var o=Ke(this),i=o?{type:"update",object:this.proxy||n,oldValue:r.value,name:t,newValue:e}:null;0,r.setNewValue(e),o&&qe(this,i)}}},t.prototype.has=function(t){var e=this.pendingKeys||(this.pendingKeys=new Map),n=e.get(t);if(n)return n.get();var r=!!this.values.get(t);return n=new at(r,D,this.name+"."+t.toString()+"?",!1),e.set(t,n),n.get()},t.prototype.addObservableProp=function(t,e,n){void 0===n&&(n=this.defaultEnhancer);var r=this.target;if(Ge(this)){var o=He(this,{object:this.proxy||r,name:t,type:"add",newValue:e});if(!o)return;e=o.newValue}var i=new at(e,n,this.name+"."+t,!1);this.values.set(t,i),e=i.value,Object.defineProperty(r,t,function(t){return ln[t]||(ln[t]={configurable:!0,enumerable:!0,get:function(){return this[A].read(t)},set:function(e){this[A].write(t,e)}})}(t)),this.notifyPropertyAddition(t,e)},t.prototype.addComputedProp=function(t,e,n){var r=this.target;n.name=n.name||this.name+"."+e,this.values.set(e,new st(n)),(t===r||function(t,e){var n=Object.getOwnPropertyDescriptor(t,e);return!n||!1!==n.configurable&&!1!==n.writable}(t,e))&&Object.defineProperty(t,e,function(t){return fn[t]||(fn[t]={configurable:!1,enumerable:!1,get:function(){return pn(this).read(t)},set:function(e){pn(this).write(t,e)}})}(e))},t.prototype.remove=function(t){if(this.values.has(t)){var e=this.target;if(Ge(this))if(!(a=He(this,{object:this.proxy||e,name:t,type:"remove"})))return;try{kt();var n=Ke(this),r=this.values.get(t),o=r&&r.get();if(r&&r.set(void 0),this.keysAtom.reportChanged(),this.values.delete(t),this.pendingKeys){var i=this.pendingKeys.get(t);i&&i.set(!1)}delete this.target[t];var a=n?{type:"remove",object:this.proxy||e,oldValue:o,name:t}:null;0,n&&qe(this,a)}finally{Rt()}}},t.prototype.illegalAccess=function(t,e){console.warn("Property '"+e+"' of '"+t+"' was accessed through the prototype chain. Use 'decorate' instead to declare the prop or access it statically through it's owner")},t.prototype.observe=function(t,e){return We(this,t)},t.prototype.intercept=function(t){return ze(this,t)},t.prototype.notifyPropertyAddition=function(t,e){var n=Ke(this),r=n?{type:"add",object:this.proxy||this.target,name:t,newValue:e}:null;if(n&&qe(this,r),this.pendingKeys){var o=this.pendingKeys.get(t);o&&o.set(!0)}this.keysAtom.reportChanged()},t.prototype.getKeys=function(){var t,e;this.keysAtom.reportObserved();var n=[];try{for(var r=a(this.values),o=r.next();!o.done;o=r.next()){var i=u(o.value,2),s=i[0];i[1]instanceof at&&n.push(s)}}catch(e){t={error:e}}finally{try{o&&!o.done&&(e=r.return)&&e.call(r)}finally{if(t)throw t.error}}return n},t}();function cn(t,e,n){if(void 0===e&&(e=""),void 0===n&&(n=M),Object.prototype.hasOwnProperty.call(t,A))return t[A];b(t)||(e=(t.constructor.name||"ObservableObject")+"@"+f()),e||(e="ObservableObject@"+f());var r=new sn(t,new Map,e,n);return g(t,A,r),r}var ln=Object.create(null),fn=Object.create(null);function pn(t){var e=t[A];return e||(R(t),t[A])}var hn=m("ObservableObjectAdministration",sn);function dn(t){return!!y(t)&&(R(t),hn(t[A]))}function vn(t,e){if("object"==typeof t&&null!==t){if(Ze(t))return void 0!==e&&p(!1),t[A].atom;if(un(t))return t[A];if(rn(t)){var n=t;return void 0===e?n._keysAtom:((r=n._data.get(e)||n._hasMap.get(e))||p(!1),r)}var r;if(R(t),e&&!t[A]&&t[e],dn(t))return e?((r=t[A].values.get(e))||p(!1),r):p(!1);if(C(t)||ct(t)||zt(t))return t}else if("function"==typeof t&&zt(t[A]))return t[A];return p(!1)}function yn(t,e){return t||p("Expecting some object"),void 0!==e?yn(vn(t,e)):C(t)||ct(t)||zt(t)?t:rn(t)||un(t)?t:(R(t),t[A]?t[A]:void p(!1))}function bn(t,e){return(void 0!==e?vn(t,e):dn(t)||rn(t)||un(t)?yn(t):vn(t)).name}var gn=Object.prototype.toString;function mn(t,e){return _n(t,e)}function _n(t,e,n,r){if(t===e)return 0!==t||1/t==1/e;if(null==t||null==e)return!1;if(t!=t)return e!=e;var o=typeof t;return("function"===o||"object"===o||"object"==typeof e)&&function(t,e,n,r){t=wn(t),e=wn(e);var o=gn.call(t);if(o!==gn.call(e))return!1;switch(o){case"[object RegExp]":case"[object String]":return""+t==""+e;case"[object Number]":return+t!=+t?+e!=+e:0==+t?1/+t==1/e:+t==+e;case"[object Date]":case"[object Boolean]":return+t==+e;case"[object Symbol]":return"undefined"!=typeof Symbol&&Symbol.valueOf.call(t)===Symbol.valueOf.call(e)}var i="[object Array]"===o;if(!i){if("object"!=typeof t||"object"!=typeof e)return!1;var a=t.constructor,u=e.constructor;if(a!==u&&!("function"==typeof a&&a instanceof a&&"function"==typeof u&&u instanceof u)&&"constructor"in t&&"constructor"in e)return!1}n=n||[],r=r||[];var s=n.length;for(;s--;)if(n[s]===t)return r[s]===e;if(n.push(t),r.push(e),i){if((s=t.length)!==e.length)return!1;for(;s--;)if(!_n(t[s],e[s],n,r))return!1}else{var c=Object.keys(t),l=void 0;if(s=c.length,Object.keys(e).length!==s)return!1;for(;s--;)if(l=c[s],!On(e,l)||!_n(t[l],e[l],n,r))return!1}return n.pop(),r.pop(),!0}(t,e,n,r)}function wn(t){return Ze(t)?t.slice():w(t)||rn(t)?Array.from(t.entries()):O(t)||un(t)?Array.from(t.entries()):t}function On(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function Sn(t){return t[Symbol.iterator]=An,t}function An(){return this}if("undefined"==typeof Proxy||"undefined"==typeof Symbol)throw new Error("[mobx] MobX 5+ requires Proxy and Symbol objects. If your environment doesn't support Symbol or Proxy objects, please downgrade to MobX 4. For React Native Android, consider upgrading JSCore.");"object"==typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__&&__MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({spy:Kt,extras:{getDebugName:bn},$mobx:A})}.call(this,n(16),n(7))},function(t,e,n){"use strict";n.r(e),function(t){n.d(e,"observer",function(){return g}),n.d(e,"Observer",function(){return m}),n.d(e,"useStaticRendering",function(){return h}),n.d(e,"connect",function(){return A}),n.d(e,"inject",function(){return S}),n.d(e,"Provider",function(){return E});var r=n(0),o=n(1);function i(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.prefix,r=void 0===n?"":n,o=e.suffix,i=void 0===o?"":o;return r+(t.displayName||t.name||t.constructor&&t.constructor.name||"<component>")+i}var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},u=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},s=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),c=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)},l=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e},f=!1,p=console;function h(t){f=t}function d(t,e,n,r,i){var a=function(t){var e=Object(o._getGlobalState)().allowStateChanges;return Object(o._getGlobalState)().allowStateChanges=t,e}(t),u=void 0;try{u=e(n,r,i)}finally{!function(t){Object(o._getGlobalState)().allowStateChanges=t}(a)}return u}function v(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=t[e],o=b[e],i=r?!0===n?function(){o.apply(this,arguments),r.apply(this,arguments)}:function(){r.apply(this,arguments),o.apply(this,arguments)}:o;t[e]=i}function y(t,e){if(null==t||null==e||"object"!==(void 0===t?"undefined":a(t))||"object"!==(void 0===e?"undefined":a(e)))return t!==e;var n=Object.keys(t);if(n.length!==Object.keys(e).length)return!0;for(var r=void 0,o=n.length-1;r=n[o];o--)if(e[r]!==t[r])return!0;return!1}var b={componentWillMount:function(){var t=this;if(!0!==f){var e=i(this),n=!1,a=!1;p.call(this,"props"),p.call(this,"state");var u=this.render.bind(this),s=null,c=!1,l=function(t,e,n){c=!1;var r=void 0,o=void 0;if(s.track(function(){try{o=d(!1,u,t,e,n)}catch(t){r=t}}),r)throw r;return o};this.render=function(){return(s=new o.Reaction(e+".render()",function(){if(!c&&(c=!0,"function"==typeof t.componentWillReact&&t.componentWillReact(),!0!==t.__$mobxIsUnmounted)){var e=!0;try{a=!0,n||r.Component.prototype.forceUpdate.call(t),e=!1}finally{a=!1,e&&s.dispose()}}})).reactComponent=t,l.$mobx=s,t.render=l,l(t.props,t.state,t.context)}}function p(t){var e=this[t],r=Object(o.createAtom)("reactive "+t);Object.defineProperty(this,t,{configurable:!0,enumerable:!0,get:function(){return r.reportObserved(),e},set:function(t){!a&&y(e,t)?(e=t,n=!0,r.reportChanged(),n=!1):e=t}})}},componentWillUnmount:function(){!0!==f&&(this.render.$mobx&&this.render.$mobx.dispose(),this.__$mobxIsUnmounted=!0)},componentDidMount:function(){},componentDidUpdate:function(){},shouldComponentUpdate:function(t,e){return f&&p.warn("[mobx-preact] It seems that a re-rendering of a React component is triggered while in static (server-side) mode. Please make sure components are rendered only once server-side."),this.state!==e||y(this.props,t)}};function g(t){var e,n;if(arguments.length>1&&p.warn('Mobx observer: Using observer to inject stores is not supported. Use `@connect(["store1", "store2"]) ComponentClass instead or preferably, use `@inject("store1", "store2") @observer ComponentClass` or `inject("store1", "store2")(observer(componentClass))``'),!0===t.isMobxInjector&&p.warn("Mobx observer: You are trying to use 'observer' on a component that already has 'inject'. Please apply 'observer' before applying 'inject'"),function(t){return!(t.prototype&&t.prototype.render||r.Component.isPrototypeOf(t))}(t))return g((n=e=function(e){function n(){return u(this,n),l(this,(n.__proto__||Object.getPrototypeOf(n)).apply(this,arguments))}return c(n,e),s(n,[{key:"render",value:function(){return t.call(this,this.props,this.context)}}]),n}(r.Component),e.displayName=i(t),n));if(!t)throw new Error("Please pass a valid component to 'observer'");return function(t){v(t,"componentWillMount",!0),v(t,"componentDidMount"),t.shouldComponentUpdate||(t.shouldComponentUpdate=b.shouldComponentUpdate)}(t.prototype||t),t.isMobXReactObserver=!0,t}var m=g(function(t){return t.children[0]()});m.displayName="Observer";"undefined"!=typeof window?window:void 0!==t||"undefined"!=typeof self&&self;var _=function(t,e){return t(e={exports:{}},e.exports),e.exports}(function(t,e){t.exports=function(){var t={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},e={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},n=Object.defineProperty,r=Object.getOwnPropertyNames,o=Object.getOwnPropertySymbols,i=Object.getOwnPropertyDescriptor,a=Object.getPrototypeOf,u=a&&a(Object);return function s(c,l,f){if("string"!=typeof l){if(u){var p=a(l);p&&p!==u&&s(c,p,f)}var h=r(l);o&&(h=h.concat(o(l)));for(var d=0;d<h.length;++d){var v=h[d];if(!(t[v]||e[v]||f&&f[v])){var y=i(l,v);try{n(c,v,y)}catch(t){}}}return c}return c}}()}),w={isMobxInjector:{value:!0,writable:!0,configurable:!0,enumerable:!0}};function O(t,e,n){var o,a,f=i(e,{prefix:"inject-",suffix:n?"-with-"+n:""}),p=(a=o=function(n){function o(){return u(this,o),l(this,(o.__proto__||Object.getPrototypeOf(o)).apply(this,arguments))}return c(o,n),s(o,[{key:"render",value:function(){var n={};for(var o in this.props)this.props.hasOwnProperty(o)&&(n[o]=this.props[o]);var i=t(this.context.mobxStores||{},n,this.context)||{};for(var a in i)n[a]=i[a];return Object(r.h)(e,n)}}]),o}(r.Component),o.displayName=f,a);return _(p,e),p.wrappedComponent=e,Object.defineProperties(p,w),p}function S(){var t=void 0;if("function"==typeof arguments[0])return t=arguments[0],function(e){var n=O(t,e);return n.isMobxInjector=!1,(n=g(n)).isMobxInjector=!0,n};for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t=function(t){return function(e,n){return t.forEach(function(t){if(!(t in n)){if(!(t in e))throw new Error("MobX injector: Store '"+t+"' is not available! Make sure it is provided by some Provider");n[t]=e[t]}}),n}}(e),function(n){return O(t,n,e.join("-"))}}function A(t,e){if("string"==typeof t)throw new Error("Store names should be provided as array");return Array.isArray(t)?e?S.apply(null,t)(A(e)):function(e){return A(t,e)}:g(t)}var x={children:!0,key:!0,ref:!0},C=console,E=function(t){function e(){return u(this,e),l(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return c(e,t),s(e,[{key:"render",value:function(t){var e=t.children;return e.length>1?Object(r.h)("div",null," ",e," "):e[0]}},{key:"getChildContext",value:function(){var t={},e=this.context.mobxStores;if(e)for(var n in e)t[n]=e[n];for(var r in this.props)x[r]||"suppressChangedStoreWarning"===r||(t[r]=this.props[r]);return{mobxStores:t}}},{key:"componentWillReceiveProps",value:function(t){if(Object.keys(t).length!==Object.keys(this.props).length&&C.warn("MobX Provider: The set of provided stores has changed. Please avoid changing stores as the change might not propagate to all children"),!t.suppressChangedStoreWarning)for(var e in t)x[e]||this.props[e]===t[e]||C.warn("MobX Provider: Provided store '"+e+"' has changed. Please avoid replacing stores as the change might not propagate to all children")}}]),e}(r.Component);if(!r.Component)throw new Error("mobx-preact requires Preact to be available")}.call(this,n(7))},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),o=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(o,i){function a(t){try{s(r.next(t))}catch(t){i(t)}}function u(t){try{s(r.throw(t))}catch(t){i(t)}}function s(t){t.done?o(t.value):new n(function(e){e(t.value)}).then(a,u)}s((r=r.apply(t,e||[])).next())})},i=this&&this.__generator||function(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(t,a)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},a=this;Object.defineProperty(e,"__esModule",{value:!0});var u=function(t){function e(e){var n=this.constructor,r=t.call(this,e)||this;return Object.setPrototypeOf(r,n.prototype),r}return r(e,t),e}(Error),s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(u);e.MissingTokenError=s;var c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(u);function l(){var t=function(){var t=localStorage.getItem(p.TOKEN_LOCAL_STORAGE_KEY);if(!t)throw new s("API access token is missing");return t}();return new Headers({Authorization:"Bearer "+t})}function f(t){if(403===t.status)throw new Error;return t.status<400?t.json():Promise.reject(t)}e.UnauthorizedError=c;var p={TOKEN_LOCAL_STORAGE_KEY:"mighty_runner_api_access_token",URL:"/character",getCharacterList:function(){return o(a,void 0,void 0,function(){var t;return i(this,function(e){return t=l(),[2,fetch(p.URL,{headers:t}).then(function(t){return f(t)})]})})},getCharacter:function(t){return o(a,void 0,void 0,function(){var e;return i(this,function(n){return e=l(),[2,fetch(p.URL+"/"+t,{headers:e}).then(function(t){return f(t)})]})})},putCharacter:function(t,e){return o(a,void 0,void 0,function(){var n,r;return i(this,function(o){return n=l(),r={headers:n,body:JSON.stringify(e),method:"PUT"},[2,fetch(p.URL+"/"+t,r).then(function(t){return f(t)})]})})}};e.default=p},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var o=function(t){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(t))))+" */"}(r),i=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[n].concat(i).concat([o]).join("\n")}return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<t.length;o++){var a=t[o];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),e.push(a))}},e}},function(t,e,n){var r={},o=function(t){var e;return function(){return void 0===e&&(e=t.apply(this,arguments)),e}}(function(){return window&&document&&document.all&&!window.atob}),i=function(t){var e={};return function(t,n){if("function"==typeof t)return t();if(void 0===e[t]){var r=function(t,e){return e?e.querySelector(t):document.querySelector(t)}.call(this,t,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}}(),a=null,u=0,s=[],c=n(12);function l(t,e){for(var n=0;n<t.length;n++){var o=t[n],i=r[o.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](o.parts[a]);for(;a<o.parts.length;a++)i.parts.push(y(o.parts[a],e))}else{var u=[];for(a=0;a<o.parts.length;a++)u.push(y(o.parts[a],e));r[o.id]={id:o.id,refs:1,parts:u}}}}function f(t,e){for(var n=[],r={},o=0;o<t.length;o++){var i=t[o],a=e.base?i[0]+e.base:i[0],u={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(u):n.push(r[a]={id:a,parts:[u]})}return n}function p(t,e){var n=i(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=s[s.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),s.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=i(t.insertAt.before,n);n.insertBefore(e,o)}}function h(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=s.indexOf(t);e>=0&&s.splice(e,1)}function d(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var r=function(){0;return n.nc}();r&&(t.attrs.nonce=r)}return v(e,t.attrs),p(t,e),e}function v(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function y(t,e){var n,r,o,i;if(e.transform&&t.css){if(!(i=e.transform(t.css)))return function(){};t.css=i}if(e.singleton){var s=u++;n=a||(a=d(e)),r=g.bind(null,n,s,!1),o=g.bind(null,n,s,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",v(e,t.attrs),p(t,e),e}(e),r=function(t,e,n){var r=n.css,o=n.sourceMap,i=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||i)&&(r=c(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),u=t.href;t.href=URL.createObjectURL(a),u&&URL.revokeObjectURL(u)}.bind(null,n,e),o=function(){h(n),n.href&&URL.revokeObjectURL(n.href)}):(n=d(e),r=function(t,e){var n=e.css,r=e.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){h(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=o()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=f(t,e);return l(n,e),function(t){for(var o=[],i=0;i<n.length;i++){var a=n[i];(u=r[a.id]).refs--,o.push(u)}t&&l(f(t,e),e);for(i=0;i<o.length;i++){var u;if(0===(u=o[i]).refs){for(var s=0;s<u.parts.length;s++)u.parts[s]();delete r[u.id]}}}};var b=function(){var t=[];return function(e,n){return t[e]=n,t.filter(Boolean).join("\n")}}();function g(t,e,n,r){var o=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=b(e,o);else{var i=document.createTextNode(o),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}},function(t,e,n){"use strict";n.r(e),n.d(e,"subscribers",function(){return p}),n.d(e,"getCurrentUrl",function(){return v}),n.d(e,"route",function(){return y}),n.d(e,"Router",function(){return S}),n.d(e,"Route",function(){return x}),n.d(e,"Link",function(){return A});var r=n(0),o={};function i(t,e){for(var n in e)t[n]=e[n];return t}function a(t,e){return t.rank<e.rank?1:t.rank>e.rank?-1:t.index-e.index}function u(t,e){return t.index=e,t.rank=function(t){return t.attributes.default?0:function(t){return s(t).map(c).join("")}(t.attributes.path)}(t),t.attributes}function s(t){return t.replace(/(^\/+|\/+$)/g,"").split("/")}function c(t){return":"==t.charAt(0)?1+"*+?".indexOf(t.charAt(t.length-1))||4:5}var l=null,f=[],p=[],h={};function d(t){return null!=t.__preactattr_||"undefined"!=typeof Symbol&&null!=t[Symbol.for("preactattr")]}function v(){var t;return""+((t=l&&l.location?l.location:l&&l.getCurrentLocation?l.getCurrentLocation():"undefined"!=typeof location?location:h).pathname||"")+(t.search||"")}function y(t,e){return void 0===e&&(e=!1),"string"!=typeof t&&t.url&&(e=t.replace,t=t.url),function(t){for(var e=f.length;e--;)if(f[e].canRoute(t))return!0;return!1}(t)&&function(t,e){void 0===e&&(e="push"),l&&l[e]?l[e](t):"undefined"!=typeof history&&history[e+"State"]&&history[e+"State"](null,null,t)}(t,e?"replace":"push"),b(t)}function b(t){for(var e=!1,n=0;n<f.length;n++)!0===f[n].routeTo(t)&&(e=!0);for(var r=p.length;r--;)p[r](t);return e}function g(t){if(t&&t.getAttribute){var e=t.getAttribute("href"),n=t.getAttribute("target");if(e&&e.match(/^\//g)&&(!n||n.match(/^_?self$/i)))return y(e)}}function m(t){if(0==t.button)return g(t.currentTarget||t.target||this),_(t)}function _(t){return t&&(t.stopImmediatePropagation&&t.stopImmediatePropagation(),t.stopPropagation&&t.stopPropagation(),t.preventDefault()),!1}function w(t){if(!(t.ctrlKey||t.metaKey||t.altKey||t.shiftKey||0!==t.button)){var e=t.target;do{if("A"===String(e.nodeName).toUpperCase()&&e.getAttribute("href")&&d(e)){if(e.hasAttribute("native"))return;if(g(e))return _(t)}}while(e=e.parentNode)}}var O=!1;var S=function(t){function e(e){t.call(this,e),e.history&&(l=e.history),this.state={url:e.url||v()},O||("function"==typeof addEventListener&&(l||addEventListener("popstate",function(){b(v())}),addEventListener("click",w)),O=!0)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.shouldComponentUpdate=function(t){return!0!==t.static||(t.url!==this.props.url||t.onChange!==this.props.onChange)},e.prototype.canRoute=function(t){return this.getMatchingChildren(this.props.children,t,!1).length>0},e.prototype.routeTo=function(t){return this._didRoute=!1,this.setState({url:t}),this.updating?this.canRoute(t):(this.forceUpdate(),this._didRoute)},e.prototype.componentWillMount=function(){f.push(this),this.updating=!0},e.prototype.componentDidMount=function(){var t=this;l&&(this.unlisten=l.listen(function(e){t.routeTo(""+(e.pathname||"")+(e.search||""))})),this.updating=!1},e.prototype.componentWillUnmount=function(){"function"==typeof this.unlisten&&this.unlisten(),f.splice(f.indexOf(this),1)},e.prototype.componentWillUpdate=function(){this.updating=!0},e.prototype.componentDidUpdate=function(){this.updating=!1},e.prototype.getMatchingChildren=function(t,e,n){return t.filter(u).sort(a).map(function(t){var a=function(t,e,n){var r,i=/(?:\?([^#]*))?(#.*)?$/,a=t.match(i),u={};if(a&&a[1])for(var c=a[1].split("&"),l=0;l<c.length;l++){var f=c[l].split("=");u[decodeURIComponent(f[0])]=decodeURIComponent(f.slice(1).join("="))}t=s(t.replace(i,"")),e=s(e||"");for(var p=Math.max(t.length,e.length),h=0;h<p;h++)if(e[h]&&":"===e[h].charAt(0)){var d=e[h].replace(/(^\:|[+*?]+$)/g,""),v=(e[h].match(/[+*?]+$/)||o)[0]||"",y=~v.indexOf("+"),b=~v.indexOf("*"),g=t[h]||"";if(!g&&!b&&(v.indexOf("?")<0||y)){r=!1;break}if(u[d]=decodeURIComponent(g),y||b){u[d]=t.slice(h).map(decodeURIComponent).join("/");break}}else if(e[h]!==t[h]){r=!1;break}return(!0===n.default||!1!==r)&&u}(e,t.attributes.path,t.attributes);if(a){if(!1!==n){var u={url:e,matches:a};return i(u,a),delete u.ref,delete u.key,Object(r.cloneElement)(t,u)}return t}}).filter(Boolean)},e.prototype.render=function(t,e){var n=t.children,r=t.onChange,o=e.url,i=this.getMatchingChildren(n,o,!0),a=i[0]||null;this._didRoute=!!a;var u=this.previousUrl;return o!==u&&(this.previousUrl=o,"function"==typeof r&&r({router:this,url:o,previous:u,active:i,current:a})),a},e}(r.Component),A=function(t){return Object(r.h)("a",i({onClick:m},t))},x=function(t){return Object(r.h)(t.component,t)};S.subscribers=p,S.getCurrentUrl=v,S.route=y,S.Router=S,S.Route=x,S.Link=A,e.default=S},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";var r=this&&this.__decorate||function(t,e,n,r){var o,i=arguments.length,a=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,n,r);else for(var u=t.length-1;u>=0;u--)(o=t[u])&&(a=(i<3?o(a):i>3?o(e,n,a):o(e,n))||a);return i>3&&a&&Object.defineProperty(e,n,a),a};Object.defineProperty(e,"__esModule",{value:!0});var o,i=n(1);!function(t){t[t.LOADING=0]="LOADING",t[t.LOADING_COMPLETE=1]="LOADING_COMPLETE",t[t.LOADING_ANIMATION_COMPLETE=2]="LOADING_ANIMATION_COMPLETE"}(o=e.AppState||(e.AppState={}));var a=function(){function t(){this.currentState=o.LOADING}return r([i.observable],t.prototype,"currentState",void 0),t}();e.appState=new a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(0);n(10);var o=n(13);r.render(r.h(o.default,null),document.body)},function(t,e,n){var r=n(11);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(5)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(e=t.exports=n(4)(!1)).push([t.i,"@import url(https://fonts.googleapis.com/css?family=Roboto);",""]),e.push([t.i,"@import url(https://fonts.googleapis.com/css?family=Maven+Pro);",""]),e.push([t.i,"@import url(https://fonts.googleapis.com/css?family=Ubuntu+Mono);",""]),e.push([t.i,":root{--large-logo-top-space: 40vh}@media screen and (orientation: landscape) and (max-height: 641px){:root{--large-logo-top-space: 25vh}}body{margin:0;font-family:'Roboto', sans-serif;background-color:#102030;height:100vh;width:100vw}\n",""])},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,r=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var o,i=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?t:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(14);e.default=r.default},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(e,"__esModule",{value:!0});var o=n(0),i=n(6),a=n(15),u=n(17),s=n(20),c=n(21),l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.render=function(){return o.h(u.default,null,o.h(c.default,null),o.h(a.default,null),o.h(i.Router,null,o.h(s.default,{path:"/"}),o.h("div",{path:"/home"},"Home")))},e}(o.Component);e.default=l},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),o=this&&this.__decorate||function(t,e,n,r){var o,i=arguments.length,a=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,n,r);else for(var u=t.length-1;u>=0;u--)(o=t[u])&&(a=(i<3?o(a):i>3?o(e,n,a):o(e,n))||a);return i>3&&a&&Object.defineProperty(e,n,a),a};Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),a=n(6),u=n(2),s=n(3),c=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.storeCharacters=function(t){e.props.character.list=t,"/"===window.location.pathname&&a.route("/characters")},e}return r(e,t),e.prototype.render=function(){return i.h("span",null)},e.prototype.componentDidMount=function(){},e.prototype.checkToken=function(){if(this.props.token.token)return!0;a.route("/set-token")},e.prototype.loadCharacters=function(){s.default.getCharacterList().then(this.storeCharacters,this.handleDataLoadError)},e.prototype.handleDataLoadError=function(t){t instanceof s.MissingTokenError?a.route("/set-token"):t instanceof s.UnauthorizedError&&a.route("/bad-token")},e=o([u.inject("token","character")],e)}(i.Component);e.default=c},function(t,e){var n,r,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(t){if(n===setTimeout)return setTimeout(t,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(t){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var s,c=[],l=!1,f=-1;function p(){l&&s&&(l=!1,s.length?c=s.concat(c):f=-1,c.length&&h())}function h(){if(!l){var t=u(p);l=!0;for(var e=c.length;e;){for(s=c,c=[];++f<e;)s&&s[f].run();f=-1,e=c.length}s=null,l=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function v(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new d(t,e)),1!==c.length||l||u(h)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=v,o.addListener=v,o.once=v,o.off=v,o.removeListener=v,o.removeAllListeners=v,o.emit=v,o.prependListener=v,o.prependOnceListener=v,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var o=n(0),i=n(2),a=n(18),u=n(19),s=n(8),c={token:a.token,character:u.character,appState:s.appState};e.default=function(t){var e=t.children;return o.h(i.Provider,r({},c),e)}},function(t,e,n){"use strict";var r=this&&this.__decorate||function(t,e,n,r){var o,i=arguments.length,a=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,n,r);else for(var u=t.length-1;u>=0;u--)(o=t[u])&&(a=(i<3?o(a):i>3?o(e,n,a):o(e,n))||a);return i>3&&a&&Object.defineProperty(e,n,a),a};Object.defineProperty(e,"__esModule",{value:!0});var o=n(1),i=n(3),a=function(){function t(){var e=this;this.retrieveLocalToken=function(){e.token=localStorage.getItem(t.LOCAL_STORAGE_KEY),"null"===e.token&&(e.token=null)},this.setToken=function(){localStorage.setItem(t.LOCAL_STORAGE_KEY,e.token)},o.reaction(function(){return e.token},this.setToken),this.retrieveLocalToken()}return t.LOCAL_STORAGE_KEY=i.default.TOKEN_LOCAL_STORAGE_KEY,r([o.observable],t.prototype,"token",void 0),t}();e.token=new a},function(t,e,n){"use strict";var r=this&&this.__decorate||function(t,e,n,r){var o,i=arguments.length,a=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,n,r);else for(var u=t.length-1;u>=0;u--)(o=t[u])&&(a=(i<3?o(a):i>3?o(e,n,a):o(e,n))||a);return i>3&&a&&Object.defineProperty(e,n,a),a};Object.defineProperty(e,"__esModule",{value:!0});var o=n(1),i=n(3),a=function(){function t(){var e=this;this.list=[],this.retrieveLocalList=function(){try{e.list=JSON.parse(localStorage.getItem(t.LIST_LOCAL_STORAGE_KEY))}catch(t){e.list=null}},this.setCharacterList=function(){localStorage.setItem(t.LIST_LOCAL_STORAGE_KEY,JSON.stringify(e.list))},o.reaction(function(){return e.list},this.setCharacterList),this.retrieveLocalList()}return Object.defineProperty(t.prototype,"active",{get:function(){var t=this;return this.list.find(function(e){return e.id===t.getCharacterId()})},set:function(t){var e=this,n=this.list.findIndex(function(t){return t.id===e.getCharacterId()});t&&(this.list[n]=t,this.setCharacterList())},enumerable:!0,configurable:!0}),t.prototype.persistActive=function(){var t=this.active;if(t)return i.default.putCharacter(t.id,t)},t.prototype.getCharacterId=function(){var t=window.location.pathname.split("/");return t[t.length-1]},t.LIST_LOCAL_STORAGE_KEY="mighty_runner_character_list",t.ACTIVE_LOCAL_STORAGE_KEY="mighty_runner_character_active",t.UPDATE_DELAY=1e3,r([o.observable],t.prototype,"list",void 0),r([o.computed],t.prototype,"active",null),t}();e.character=new a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(0);e.default=function(t){return r.h("div",null)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(22);e.default=r.default},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),o=this&&this.__decorate||function(t,e,n,r){var o,i=arguments.length,a=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,n,r);else for(var u=t.length-1;u>=0;u--)(o=t[u])&&(a=(i<3?o(a):i>3?o(e,n,a):o(e,n))||a);return i>3&&a&&Object.defineProperty(e,n,a),a},i=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(o,i){function a(t){try{s(r.next(t))}catch(t){i(t)}}function u(t){try{s(r.throw(t))}catch(t){i(t)}}function s(t){t.done?o(t.value):new n(function(e){e(t.value)}).then(a,u)}s((r=r.apply(t,e||[])).next())})},a=this&&this.__generator||function(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(t,a)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}};Object.defineProperty(e,"__esModule",{value:!0});var u=n(0),s=n(23),c=n(2),l=n(8),f=n(24),p=n(26),h=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.time=0,e.stopAnimator=!1,e.runGl=function(){if(e.compatibilityCheck())return e.loadDependencies().then(function(){e.initialize(),e.setCamera(),e.makeGeometry(),e.initializeLighting(),document.getElementById("digibackground").appendChild(e.renderer.domElement),e.drivingFunction=e.loadingCamera,e.animate(),setTimeout(function(){return e.props.appState.currentState=l.AppState.LOADING_COMPLETE},1e3)})},e.loadDependencies=function(){return i(e,void 0,void 0,function(){var t=this;return a(this,function(e){return[2,new Promise(function(e,n){t.logoTexture=(new s.TextureLoader).load(p,e,void 0,n)})]})})},e.compatibilityCheck=function(){try{var t=document.createElement("canvas");return!(!window.WebGLRenderingContext||!t.getContext("webgl")&&!t.getContext("experimental-webgl"))}catch(t){return!1}},e.initialize=function(){e.scene=new s.Scene,e.scene.fog=new s.FogExp2(1056816,.1),e.scene.background=new s.Color(1056816),e.renderer=new s.WebGLRenderer({alpha:!0}),e.renderer.shadowMap.enabled=!0,e.renderer.shadowMap.type=s.PCFSoftShadowMap,e.renderer.setSize(window.innerWidth,window.innerHeight),window.addEventListener("resize",e.onWindowResize),e.renderer.sortObjects=!1},e.setCamera=function(){e.camera=new s.PerspectiveCamera(45,window.innerWidth/window.innerHeight,1,2e3),e.camera.position.x=n.CAMERA_POSITION_X,e.camera.position.y=n.CAMERA_POSITION_Y,e.camera.position.z=n.CAMERA_POSITION_Z,e.camera.lookAt(new s.Vector3(0,0,0))},e.onWindowResize=function(){e.renderer.setSize(window.innerWidth,window.innerHeight)},e.initializeLighting=function(){e.spotlight=new s.SpotLight(16777215,5),e.spotlight.position.set(0,0,4),e.spotlight.castShadow=!0,e.spotlight.shadow.mapSize.width=1024,e.spotlight.shadow.mapSize.height=1024,e.spotlight.shadow.camera.near=3,e.spotlight.shadow.camera.far=200,e.spotlight.lookAt(0,0,0),e.scene.add(e.spotlight),e.frontLight=new s.DirectionalLight(16777215,1),e.frontLight.position.set(-4.5,3.5,10),e.frontLight.target=e.logo,e.scene.add(e.frontLight),e.ambientLight=new s.AmbientLight(16777215,.7),e.scene.add(e.ambientLight),e.accentLight=new s.DirectionalLight(16777215,1),e.accentLight.position.set(-6,6,10),e.accentLight.target=e.logo,e.scene.add(e.accentLight)},e.loadingCamera=function(){var t=10*Math.sin(.005*e.time-1.7),n=15*Math.cos(.005*e.time-1.7);e.spotlight.position.set(t,n,4),e.time++},e.configureHomeLighting=function(){e.accentLight.intensity+=.1,e.frontLight.intensity-=e.frontLight.intensity<=0?0:.1/3},e.lightsAreHome=function(){return e.accentLight.intensity>=3&&e.frontLight.intensity<=0},e.spotlightIsHome=function(){return Math.abs(e.spotlight.position.y-6)<.1&&Math.abs(e.spotlight.position.x-6)<.1},e.homePosition=function(){if(e.spotlightIsHome()&&e.lightsAreHome())e.drivingFunction=e.moveLogo;else{e.spotlightIsHome()&&e.spotlight.position.set(6,6,4);var t=.5*(6-e.spotlight.position.y)+e.spotlight.position.y,n=.5*(6-e.spotlight.position.x)+e.spotlight.position.x;e.spotlight.position.set(n,t,4),e.configureHomeLighting()}},e.moveLogo=function(){e.logoGroup.position.z>=-.6?e.logoGroup.position.z-=.1:e.stopAnimator=!0},e.animate=function(){e.drivingFunction(),e.renderer.render(e.scene,e.camera),e.stopAnimator||requestAnimationFrame(e.animate)},e}var n;return r(e,t),n=e,e.prototype.render=function(){return this.props.appState.currentState===l.AppState.LOADING_COMPLETE&&(this.drivingFunction=this.homePosition),u.h("div",{className:f.digiGrid},u.h("div",{id:"digibackground"}))},e.prototype.componentDidMount=function(){this.runGl()},e.prototype.makeGeometry=function(){var t=new s.PlaneBufferGeometry(.75,.75),e=new s.MeshStandardMaterial({color:16777215,map:this.logoTexture,transparent:!0});this.logo=new s.Mesh(t,e),this.logo.position.set(0,0,.51);var n=new s.MeshStandardMaterial({color:10953498}),r=new s.CylinderBufferGeometry(.5,.5,.5,40,1);this.logoPedestal=new s.Mesh(r,n),this.logoPedestal.position.set(0,0,.25),this.logoPedestal.rotation.x=Math.PI/2,this.logoPedestal.castShadow=!0,this.logoGroup=new s.Group,this.logoGroup.add(this.logo,this.logoPedestal),this.scene.add(this.logoGroup);var o=new s.PlaneBufferGeometry(30,100),i=new s.MeshStandardMaterial({color:1056816});this.ground=new s.Mesh(o,i),this.ground.receiveShadow=!0,this.scene.add(this.ground)},e.CAMERA_POSITION_X=0,e.CAMERA_POSITION_Y=0,e.CAMERA_POSITION_Z=10,e.AMBIENT_COLOR=1056816,e=n=o([c.inject("appState"),c.observer],e)}(u.Component);e.default=h},function(t,e){t.exports=THREE},function(t,e,n){var r=n(25);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(5)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(e=t.exports=n(4)(!1)).push([t.i,".digi-grid-background__digiGrid--3YvqH{position:fixed;height:100vh;width:100vw;top:0;left:0}\n",""]),e.locals={digiGrid:"digi-grid-background__digiGrid--3YvqH"}},function(t,e,n){t.exports=n.p+"0265f06f4b7b529cc83b989f1817172c.png"}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,